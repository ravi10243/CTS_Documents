//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class AGN_DSRM_Experian_Response {

	public class OtherHouseholdMembers {
        @AuraEnabled
		public List<String> name {get;set;} 

		public OtherHouseholdMembers(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'OtherHouseholdMembers consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Products {
        @AuraEnabled
		public PreciseIDServer preciseIDServer {get;set;} 

		public Products(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'preciseIDServer') {
							preciseIDServer = new PreciseIDServer(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Products consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	@AuraEnabled
	public ResponseHeader responseHeader {get;set;}
    @AuraEnabled
	public ClientResponsePayload clientResponsePayload {get;set;} 
    @AuraEnabled
	public OriginalRequestData originalRequestData {get;set;} 

	public AGN_DSRM_Experian_Response(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'responseHeader') {
						responseHeader = new ResponseHeader(parser);
					} else if (text == 'clientResponsePayload') {
						clientResponsePayload = new ClientResponsePayload(parser);
					} else if (text == 'originalRequestData') {
						originalRequestData = new OriginalRequestData(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'AGN_DSRM_Experian_Response consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Address {
        @AuraEnabled
		public Summary_Z summary {get;set;} 
        @AuraEnabled
		public Detail detail {get;set;} 

		public Address(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary_Z(parser);
						} else if (text == 'detail') {
							detail = new Detail(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Address consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class FraudSolutions {
        @AuraEnabled
		public Response response {get;set;} 

		public FraudSolutions(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'response') {
							response = new Response(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'FraudSolutions consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Addresses_Z {
        @AuraEnabled
		public String addressType {get;set;} 
        @AuraEnabled
		public String id {get;set;} 
        /*
        @AuraEnabled
		public String poBoxNumber {get;set;}
		*/
        @AuraEnabled
		public String postTown {get;set;} 
        @AuraEnabled
		public String postal {get;set;} 
        @AuraEnabled
		public String stateProvinceCode {get;set;} 
        @AuraEnabled
		public String street {get;set;} 
        /*
        @AuraEnabled
		public String street2 {get;set;} 
		*/
		public Addresses_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'addressType') {
							addressType = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						}/* else if (text == 'poBoxNumber') {
							poBoxNumber = parser.getText();
						}*/ else if (text == 'postTown') {
							postTown = parser.getText();
						} else if (text == 'postal') {
							postal = parser.getText();
						} else if (text == 'stateProvinceCode') {
							stateProvinceCode = parser.getText();
						} else if (text == 'street') {
							street = parser.getText();
						}/* else if (text == 'street2') {
							street2 = parser.getText();
						}*/ else {
							System.debug(LoggingLevel.WARN, 'Addresses_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ChangeOfAddress {
        @AuraEnabled
		public Summary_U summary {get;set;} 

		public ChangeOfAddress(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary_U(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ChangeOfAddress consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Scores {
        @AuraEnabled
		public String name {get;set;} 
        @AuraEnabled
		public Integer score {get;set;} 
        @AuraEnabled
		public String type_Z {get;set;} // in json: type

		public Scores(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'score') {
							score = parser.getIntegerValue();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Scores consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class QuestionSelect {
        @AuraEnabled
		public List<String> questionChoice {get;set;} 

		public QuestionSelect(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'questionChoice') {
							questionChoice = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'QuestionSelect consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Addresses {
        @AuraEnabled
		public List<Address> address {get;set;} 

		public Addresses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'address') {
							address = arrayOfAddress(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Addresses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Counts_Y {
        @AuraEnabled
		public Integer consumerIDReturnCount {get;set;} 

		public Counts_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'consumerIDReturnCount') {
							consumerIDReturnCount = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Counts_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
    
	public class Error {
		@AuraEnabled
		public String reportDate {get;set;}
		@AuraEnabled
		public String reportTime {get;set;}
		@AuraEnabled
		public String transactionID {get;set;}
		@AuraEnabled
		public String errorCode {get;set;}
		@AuraEnabled
		public String errorDescription {get;set;}
		//@AuraEnabled
		//public ActionIndicator actionIndicator {get;set;}
		@AuraEnabled
		public String referenceNumber {get;set;} 

		public Error(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'reportDate') {
							reportDate = parser.getText();
						} else if (text == 'reportTime') {
							reportTime = parser.getText();
						} else if (text == 'transactionID') {
							transactionID = parser.getText();
						} else if (text == 'errorCode') {
							errorCode = parser.getText();
						} else if (text == 'errorDescription') {
							errorDescription = parser.getText();
						} /*else if (text == 'actionIndicator') {
							actionIndicator = new ActionIndicator(parser);
						}*/ else if (text == 'referenceNumber') {
							referenceNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Error consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
    
	public class PriorUsage {
        @AuraEnabled
		public String exceededUseLimitCode {get;set;} 
        @AuraEnabled
		public Integer clientUseLimitPeriod {get;set;} 
        @AuraEnabled
		public Integer clientUseLimitCount {get;set;} 
        @AuraEnabled
		public Integer totalUseLimitPeriod {get;set;} 
        @AuraEnabled
		public Integer totalUseLimitCount {get;set;} 
        @AuraEnabled
		public Integer consumerSSNTotal {get;set;} 
        @AuraEnabled
		public Integer clientSSNUseLimitPeriod {get;set;} 
        @AuraEnabled
		public Integer clientSSNUseLimitCount {get;set;} 
        @AuraEnabled
		public Integer totalSSNUseLimitPeriod {get;set;} 
        @AuraEnabled
		public Integer totalSSNUseLimitCount {get;set;} 
        @AuraEnabled
		public Integer concurrentPINTotal {get;set;} 
        @AuraEnabled
		public Integer clientConcurrentPINLimitCount {get;set;} 
        @AuraEnabled
		public Integer companyConcurrentPINLimitCount {get;set;} 
        @AuraEnabled
		public Integer globalConcurrentPINLimitCount {get;set;} 

		public PriorUsage(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'exceededUseLimitCode') {
							exceededUseLimitCode = parser.getText();
						} else if (text == 'clientUseLimitPeriod') {
							clientUseLimitPeriod = parser.getIntegerValue();
						} else if (text == 'clientUseLimitCount') {
							clientUseLimitCount = parser.getIntegerValue();
						} else if (text == 'totalUseLimitPeriod') {
							totalUseLimitPeriod = parser.getIntegerValue();
						} else if (text == 'totalUseLimitCount') {
							totalUseLimitCount = parser.getIntegerValue();
						} else if (text == 'consumerSSNTotal') {
							consumerSSNTotal = parser.getIntegerValue();
						} else if (text == 'clientSSNUseLimitPeriod') {
							clientSSNUseLimitPeriod = parser.getIntegerValue();
						} else if (text == 'clientSSNUseLimitCount') {
							clientSSNUseLimitCount = parser.getIntegerValue();
						} else if (text == 'totalSSNUseLimitPeriod') {
							totalSSNUseLimitPeriod = parser.getIntegerValue();
						} else if (text == 'totalSSNUseLimitCount') {
							totalSSNUseLimitCount = parser.getIntegerValue();
						} else if (text == 'concurrentPINTotal') {
							concurrentPINTotal = parser.getIntegerValue();
						} else if (text == 'clientConcurrentPINLimitCount') {
							clientConcurrentPINLimitCount = parser.getIntegerValue();
						} else if (text == 'companyConcurrentPINLimitCount') {
							companyConcurrentPINLimitCount = parser.getIntegerValue();
						} else if (text == 'globalConcurrentPINLimitCount') {
							globalConcurrentPINLimitCount = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'PriorUsage consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class OriginalRequestData {
        @AuraEnabled
		public Application application {get;set;} 
        @AuraEnabled
		public List<Contacts> contacts {get;set;} 
        @AuraEnabled
		public List<Control> control {get;set;} 
        @AuraEnabled
		public Kba_Z kba {get;set;} 

		public OriginalRequestData(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'application') {
							application = new Application(parser);
						} else if (text == 'contacts') {
							contacts = arrayOfContacts(parser);
						} else if (text == 'control') {
							control = arrayOfControl(parser);
						} else if (text == 'kba') {
							kba = new Kba_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'OriginalRequestData consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Counts_Z {
        @AuraEnabled
		public Integer residentialPhoneMatchCount {get;set;} 
        @AuraEnabled
		public Integer residentialPhoneReturnCount {get;set;} 
        @AuraEnabled
		public Integer highRiskPhoneReturnCount {get;set;} 
        @AuraEnabled
		public Integer businessPhoneMatchCount {get;set;} 
        @AuraEnabled
		public Integer businessPhoneReturnCount {get;set;} 

		public Counts_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'residentialPhoneMatchCount') {
							residentialPhoneMatchCount = parser.getIntegerValue();
						} else if (text == 'residentialPhoneReturnCount') {
							residentialPhoneReturnCount = parser.getIntegerValue();
						} else if (text == 'highRiskPhoneReturnCount') {
							highRiskPhoneReturnCount = parser.getIntegerValue();
						} else if (text == 'businessPhoneMatchCount') {
							businessPhoneMatchCount = parser.getIntegerValue();
						} else if (text == 'businessPhoneReturnCount') {
							businessPhoneReturnCount = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Counts_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PreviousAddress {
        @AuraEnabled
		public Summary_S summary {get;set;} 
        @AuraEnabled
		public Detail_X detail {get;set;} 

		public PreviousAddress(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary_S(parser);
						} else if (text == 'detail') {
							detail = new Detail_X(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'PreviousAddress consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Counts_W {
        @AuraEnabled
		public Integer ofacReturnCount {get;set;} 

		public Counts_W(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ofacReturnCount') {
							ofacReturnCount = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Counts_W consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PreciseMatch {
        @AuraEnabled
		public String version {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress responseStatusCode {get;set;} 
        @AuraEnabled
		public String preciseMatchTransactionID {get;set;} 
        @AuraEnabled
		public String preciseMatchScore {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress preciseMatchDecision {get;set;} 
        @AuraEnabled
		public Addresses addresses {get;set;} 
        @AuraEnabled
		public Phones phones {get;set;} 
        @AuraEnabled
		public ConsumerID consumerID {get;set;} 
        @AuraEnabled
		public DateOfBirth dateOfBirth {get;set;} 
        @AuraEnabled
		public DriverLicense driverLicense {get;set;} 
        @AuraEnabled
		public ChangeOfAddresses changeOfAddresses {get;set;} 
        @AuraEnabled
		public Ofac ofac {get;set;} 
        @AuraEnabled
		public PreviousAddresses previousAddresses {get;set;} 
        @AuraEnabled
		public Ssnfinder ssnfinder {get;set;} 

		public PreciseMatch(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'version') {
							version = parser.getText();
						} else if (text == 'responseStatusCode') {
							responseStatusCode = new FullNameVerifiesToAddress(parser);
						} else if (text == 'preciseMatchTransactionID') {
							preciseMatchTransactionID = parser.getText();
						} else if (text == 'preciseMatchScore') {
							preciseMatchScore = parser.getText();
						} else if (text == 'preciseMatchDecision') {
							preciseMatchDecision = new FullNameVerifiesToAddress(parser);
						} else if (text == 'addresses') {
							addresses = new Addresses(parser);
						} else if (text == 'phones') {
							phones = new Phones(parser);
						} else if (text == 'consumerID') {
							consumerID = new ConsumerID(parser);
						} else if (text == 'dateOfBirth') {
							dateOfBirth = new DateOfBirth(parser);
						} else if (text == 'driverLicense') {
							driverLicense = new DriverLicense(parser);
						} else if (text == 'changeOfAddresses') {
							changeOfAddresses = new ChangeOfAddresses(parser);
						} else if (text == 'ofac') {
							ofac = new Ofac(parser);
						} else if (text == 'previousAddresses') {
							previousAddresses = new PreviousAddresses(parser);
						} else if (text == 'ssnfinder') {
							ssnfinder = new Ssnfinder(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'PreciseMatch consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Detail_Z {
        @AuraEnabled
		public List<ResidentialPhoneRcd> residentialPhoneRcd {get;set;} 
        @AuraEnabled
		public List<RecommendedNextActions> phoneHighRiskRcd {get;set;} 
        @AuraEnabled
		public List<HighRiskAddressDescription> highRiskPhoneDescription {get;set;} 
        @AuraEnabled
		public List<RecommendedNextActions> businessPhoneRcd {get;set;} 

		public Detail_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'residentialPhoneRcd') {
							residentialPhoneRcd = arrayOfResidentialPhoneRcd(parser);
						} else if (text == 'phoneHighRiskRcd') {
							phoneHighRiskRcd = arrayOfRecommendedNextActions(parser);
						} else if (text == 'highRiskPhoneDescription') {
							highRiskPhoneDescription = arrayOfHighRiskAddressDescription(parser);
						} else if (text == 'businessPhoneRcd') {
							businessPhoneRcd = arrayOfRecommendedNextActions(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Detail_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Counts_X {
        @AuraEnabled
		public Integer changeOfAddressReturnCount {get;set;} 

		public Counts_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'changeOfAddressReturnCount') {
							changeOfAddressReturnCount = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Counts_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Phones {
        @AuraEnabled
		public List<Phone> phone {get;set;} 

		public Phones(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'phone') {
							phone = arrayOfPhone(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Phones consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Detail_Y {
        @AuraEnabled
		public List<ConsumerIDRcd> consumerIDRcd {get;set;} 

		public Detail_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'consumerIDRcd') {
							consumerIDRcd = arrayOfConsumerIDRcd(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Detail_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Counts_U {
        @AuraEnabled
		public Integer ssnfinderReturnCount {get;set;} 

		public Counts_U(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ssnfinderReturnCount') {
							ssnfinderReturnCount = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Counts_U consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DecisionElements {
        @AuraEnabled
		public String serviceName {get;set;} 
        @AuraEnabled
		public String applicantId {get;set;} 
        @AuraEnabled
		public String decision {get;set;} 
        @AuraEnabled
		public String decisionText {get;set;} 
        @AuraEnabled
		public String appReference {get;set;} 
        @AuraEnabled
		public OtherData otherData {get;set;} 
        @AuraEnabled
		public List<Decisions> decisions {get;set;} 
        @AuraEnabled
		public List<Matches> matches {get;set;} 
        @AuraEnabled
		public List<Scores> scores {get;set;} 

		public DecisionElements(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'serviceName') {
							serviceName = parser.getText();
						} else if (text == 'applicantId') {
							applicantId = parser.getText();
						} else if (text == 'decision') {
							decision = parser.getText();
						} else if (text == 'decisionText') {
							decisionText = parser.getText();
						} else if (text == 'appReference') {
							appReference = parser.getText();
						} else if (text == 'otherData') {
							otherData = new OtherData(parser);
						} else if (text == 'decisions') {
							decisions = arrayOfDecisions(parser);
						} else if (text == 'matches') {
							matches = arrayOfMatches(parser);
						} else if (text == 'scores') {
							scores = arrayOfScores(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'DecisionElements consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Counts_V {
        @AuraEnabled
		public Integer previousAddressReturnCount {get;set;} 

		public Counts_V(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'previousAddressReturnCount') {
							previousAddressReturnCount = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Counts_V consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Detail_X {
        @AuraEnabled
		public List<PreviousAddressRcd> previousAddressRcd {get;set;} 

		public Detail_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'previousAddressRcd') {
							previousAddressRcd = arrayOfPreviousAddressRcd(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Detail_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class MfaValidationResponse {
        @AuraEnabled
		public ValidateOTP validateOTP {get;set;} 

		public MfaValidationResponse(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'validateOTP') {
							validateOTP = new ValidateOTP(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'MfaValidationResponse consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	/*
	public class Emails {
        @AuraEnabled
		public String email {get;set;} 
        @AuraEnabled
		public String id {get;set;} 
        @AuraEnabled
		public String type_Z {get;set;} // in json: type

		public Emails(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'email') {
							email = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Emails consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	*/
	public class QuestionSet {
        @AuraEnabled
		public Integer questionType {get;set;} 
        @AuraEnabled
		public String questionText {get;set;} 
        @AuraEnabled
		public QuestionSelect questionSelect {get;set;} 

		public QuestionSet(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'questionType') {
							questionType = parser.getIntegerValue();
						} else if (text == 'questionText') {
							questionText = parser.getText();
						} else if (text == 'questionSelect') {
							questionSelect = new QuestionSelect(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'QuestionSet consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DateOfBirth {
        @AuraEnabled
		public Summary_W summary {get;set;} 

		public DateOfBirth(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary_W(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'DateOfBirth consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ResponseHeader {
        @AuraEnabled
		public String requestType {get;set;} 
        @AuraEnabled
		public String clientReferenceId {get;set;} 
        @AuraEnabled
		public String expRequestId {get;set;} 
        @AuraEnabled
		public String messageTime {get;set;} 
        @AuraEnabled
		public OverallResponse overallResponse {get;set;} 
        @AuraEnabled
		public String responseCode {get;set;} 
        @AuraEnabled
		public String responseType {get;set;} 
        @AuraEnabled
		public String responseMessage {get;set;} 
        @AuraEnabled
		public String tenantID {get;set;} 

		public ResponseHeader(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'requestType') {
							requestType = parser.getText();
						} else if (text == 'clientReferenceId') {
							clientReferenceId = parser.getText();
						} else if (text == 'expRequestId') {
							expRequestId = parser.getText();
						} else if (text == 'messageTime') {
							messageTime = parser.getText();
						} else if (text == 'overallResponse') {
							overallResponse = new OverallResponse(parser);
						} else if (text == 'responseCode') {
							responseCode = parser.getText();
						} else if (text == 'responseType') {
							responseType = parser.getText();
						} else if (text == 'responseMessage') {
							responseMessage = parser.getText();
						} else if (text == 'tenantID') {
							tenantID = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ResponseHeader consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DriverLicense {
        @AuraEnabled
		public Summary_V summary {get;set;} 

		public DriverLicense(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary_V(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'DriverLicense consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CrossReferenceIndicatorsGrid {
        @AuraEnabled
		public FullNameVerifiesToAddress fullNameVerifiesToAddress {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress fullNameVerifiesToSSN {get;set;}
        @AuraEnabled
		public FullNameVerifiesToAddress fullNameVerifiesToDL {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress fullNameVerifiesToPhone {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress surnameOnlyVerifiesToAddress {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress surnameOnlyVerifiesToSSN {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress surnameOnlyVerifiesToDL {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress surnameOnlyVerifiesToPhone {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress addressVerifiesToFullName {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress addressVerifiesToSurnameOnly {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress addressVerifiesToSSN {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress addressVerifiesToDL {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress addressVerifiesToPhone {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress phoneVerifiesToFullName {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress phoneVerifiesToSurnameOnly {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress phoneVerifiesToAddress {get;set;}
        @AuraEnabled
		public FullNameVerifiesToAddress ssnVerifiesToFullName {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress ssnVerifiesToSurnameOnly {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress ssnVerifiesToAddress {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress dlVerifiesToFullName {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress dlVerifiesToSurnameOnly {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress dlVerifiesToAddress {get;set;} 

		public CrossReferenceIndicatorsGrid(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fullNameVerifiesToAddress') {
							fullNameVerifiesToAddress = new FullNameVerifiesToAddress(parser);
						} else if (text == 'fullNameVerifiesToSSN') {
							fullNameVerifiesToSSN = new FullNameVerifiesToAddress(parser);
						} else if (text == 'fullNameVerifiesToDL') {
							fullNameVerifiesToDL = new FullNameVerifiesToAddress(parser);
						} else if (text == 'fullNameVerifiesToPhone') {
							fullNameVerifiesToPhone = new FullNameVerifiesToAddress(parser);
						} else if (text == 'surnameOnlyVerifiesToAddress') {
							surnameOnlyVerifiesToAddress = new FullNameVerifiesToAddress(parser);
						} else if (text == 'surnameOnlyVerifiesToSSN') {
							surnameOnlyVerifiesToSSN = new FullNameVerifiesToAddress(parser);
						} else if (text == 'surnameOnlyVerifiesToDL') {
							surnameOnlyVerifiesToDL = new FullNameVerifiesToAddress(parser);
						} else if (text == 'surnameOnlyVerifiesToPhone') {
							surnameOnlyVerifiesToPhone = new FullNameVerifiesToAddress(parser);
						} else if (text == 'addressVerifiesToFullName') {
							addressVerifiesToFullName = new FullNameVerifiesToAddress(parser);
						} else if (text == 'addressVerifiesToSurnameOnly') {
							addressVerifiesToSurnameOnly = new FullNameVerifiesToAddress(parser);
						} else if (text == 'addressVerifiesToSSN') {
							addressVerifiesToSSN = new FullNameVerifiesToAddress(parser);
						} else if (text == 'addressVerifiesToDL') {
							addressVerifiesToDL = new FullNameVerifiesToAddress(parser);
						} else if (text == 'addressVerifiesToPhone') {
							addressVerifiesToPhone = new FullNameVerifiesToAddress(parser);
						} else if (text == 'phoneVerifiesToFullName') {
							phoneVerifiesToFullName = new FullNameVerifiesToAddress(parser);
						} else if (text == 'phoneVerifiesToSurnameOnly') {
							phoneVerifiesToSurnameOnly = new FullNameVerifiesToAddress(parser);
						} else if (text == 'phoneVerifiesToAddress') {
							phoneVerifiesToAddress = new FullNameVerifiesToAddress(parser);
						} else if (text == 'ssnVerifiesToFullName') {
							ssnVerifiesToFullName = new FullNameVerifiesToAddress(parser);
						} else if (text == 'ssnVerifiesToSurnameOnly') {
							ssnVerifiesToSurnameOnly = new FullNameVerifiesToAddress(parser);
						} else if (text == 'ssnVerifiesToAddress') {
							ssnVerifiesToAddress = new FullNameVerifiesToAddress(parser);
						} else if (text == 'dlVerifiesToFullName') {
							dlVerifiesToFullName = new FullNameVerifiesToAddress(parser);
						} else if (text == 'dlVerifiesToSurnameOnly') {
							dlVerifiesToSurnameOnly = new FullNameVerifiesToAddress(parser);
						} else if (text == 'dlVerifiesToAddress') {
							dlVerifiesToAddress = new FullNameVerifiesToAddress(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CrossReferenceIndicatorsGrid consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Json {
        @AuraEnabled
		public FraudSolutions fraudSolutions {get;set;} 

		public Json(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fraudSolutions') {
							fraudSolutions = new FraudSolutions(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Json consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Kbascore {
        @AuraEnabled
		public General_Z general {get;set;} 
        @AuraEnabled
		public ScoreSummary scoreSummary {get;set;} 

		public Kbascore(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'general') {
							general = new General_Z(parser);
						} else if (text == 'scoreSummary') {
							scoreSummary = new ScoreSummary(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Kbascore consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RecommendedNextActions {

		public RecommendedNextActions(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'RecommendedNextActions consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class General_Z {
        @AuraEnabled
		public PriorUsage priorUsage {get;set;} 
        @AuraEnabled
		public Integer kbaresultCode {get;set;} 
        @AuraEnabled
		public String kbaresultCodeDescription {get;set;} 

		public General_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'priorUsage') {
							priorUsage = new PriorUsage(parser);
						} else if (text == 'kbaresultCode') {
							kbaresultCode = parser.getIntegerValue();
						} else if (text == 'kbaresultCodeDescription') {
							kbaresultCodeDescription = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'General_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PreciseIDServer {
        @AuraEnabled
		public String sessionID {get;set;} 
        @AuraEnabled
		public Header header {get;set;} 
        @AuraEnabled
		public Summary summary {get;set;} 
        @AuraEnabled
		public PreciseMatch preciseMatch {get;set;} 
        @AuraEnabled
		public Kba kba {get;set;} 
        @AuraEnabled
		public MultiFactorAuth multiFactorAuth {get;set;} 
        @AuraEnabled
		public String pidxmlversion {get;set;} 
        @AuraEnabled
		public GlbDetail glbDetail {get;set;} 
        @AuraEnabled
		public Kbascore kbascore {get;set;}
        @AuraEnabled
		public Error error {get;set;}
        
		public PreciseIDServer(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sessionID') {
							sessionID = parser.getText();
						} else if (text == 'header') {
							header = new Header(parser);
						} else if (text == 'summary') {
							summary = new Summary(parser);
						} else if (text == 'preciseMatch') {
							preciseMatch = new PreciseMatch(parser);
						} else if (text == 'kba') {
							kba = new Kba(parser);
						} else if (text == 'multiFactorAuth') {
							multiFactorAuth = new MultiFactorAuth(parser);
						} else if (text == 'pidxmlversion') {
							pidxmlversion = parser.getText();
						} else if (text == 'glbDetail') {
							glbDetail = new GlbDetail(parser);
						} else if (text == 'kbascore') {
							kbascore = new Kbascore(parser);
						} else if (text == 'error') {
							error = new Error(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'PreciseIDServer consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Header {
        @AuraEnabled
		public String reportDate {get;set;} 
        @AuraEnabled
		public String reportTime {get;set;} 
        @AuraEnabled
		public String productOption {get;set;} 
        @AuraEnabled
		public String subcode {get;set;} 
        @AuraEnabled
		public String referenceNumber {get;set;} 

		public Header(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'reportDate') {
							reportDate = parser.getText();
						} else if (text == 'reportTime') {
							reportTime = parser.getText();
						} else if (text == 'productOption') {
							productOption = parser.getText();
						} else if (text == 'subcode') {
							subcode = parser.getText();
						} else if (text == 'referenceNumber') {
							referenceNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Header consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class General {
        @AuraEnabled
		public String sessionID {get;set;} 
        @AuraEnabled
		public Integer numberOfQuestions {get;set;} 
        @AuraEnabled
		public Integer kbaresultCode {get;set;} 
        @AuraEnabled
		public String kbaresultCodeDescription {get;set;} 

		public General(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sessionID') {
							sessionID = parser.getText();
						} else if (text == 'numberOfQuestions') {
							numberOfQuestions = parser.getIntegerValue();
						} else if (text == 'kbaresultCode') {
							kbaresultCode = parser.getIntegerValue();
						} else if (text == 'kbaresultCodeDescription') {
							kbaresultCodeDescription = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'General consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class MultiFactorAuth {
        @AuraEnabled
		public String oneTimePwd {get;set;} 
        @AuraEnabled
		public MFStatus status {get;set;} 
        @AuraEnabled
		public MfaValidationResponse mfaValidationResponse {get;set;} 

		public MultiFactorAuth(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'oneTimePwd') {
							oneTimePwd = parser.getText();
						} else if (text == 'status') {
							status = new MFStatus(parser);
						} else if (text == 'mfaValidationResponse') {
							mfaValidationResponse = new MfaValidationResponse(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'MultiFactorAuth consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class MFStatus {
        @AuraEnabled
		public String value {get;set;} 
        @AuraEnabled
		public String code {get;set;} 

		public MFStatus(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'value') {
							value = parser.getText();
						} else if (text == 'code') {
							code = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'FullNameVerifiesToAddress consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class Application {
        @AuraEnabled
		public String oneTimePasscode {get;set;} 
        @AuraEnabled
		public ProductDetails productDetails {get;set;} 

		public Application(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'oneTimePasscode') {
							oneTimePasscode = parser.getText();
						} else if (text == 'productDetails') {
							productDetails = new ProductDetails(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Application consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Person {
        @AuraEnabled
		public List<Names> names {get;set;} 
        /*
        @AuraEnabled
		public PersonDetails personDetails {get;set;} 
        @AuraEnabled
		public String personIdentifier {get;set;} 
        @AuraEnabled
		public String typeOfPerson {get;set;} 
		*/
		public Person(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'names') {
                            names = arrayOfNames(parser);
                        } 
                        /*else if (text == 'personDetails') {
                            personDetails = new PersonDetails(parser);
                            } else if (text == 'personIdentifier') {
                            personIdentifier = parser.getText();
                            } else if (text == 'typeOfPerson') {
                            typeOfPerson = parser.getText();
                        }*/
                        else {
                            System.debug(LoggingLevel.WARN, 'Person consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
				}
			}
		}
	}
	
	public class Detail {
        @AuraEnabled
		public StandardizedAddressRcd standardizedAddressRcd {get;set;} 
        @AuraEnabled
		public List<ResidentialAddressRcd> residentialAddressRcd {get;set;} 
        @AuraEnabled
		public List<RecommendedNextActions> highRiskAddressRcd {get;set;} 
        @AuraEnabled
		public List<HighRiskAddressDescription> highRiskAddressDescription {get;set;} 
        @AuraEnabled
		public List<RecommendedNextActions> businessAddressRcd {get;set;} 

		public Detail(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'standardizedAddressRcd') {
							standardizedAddressRcd = new StandardizedAddressRcd(parser);
						} else if (text == 'residentialAddressRcd') {
							residentialAddressRcd = arrayOfResidentialAddressRcd(parser);
						} else if (text == 'highRiskAddressRcd') {
							highRiskAddressRcd = arrayOfRecommendedNextActions(parser);
						} else if (text == 'highRiskAddressDescription') {
							highRiskAddressDescription = arrayOfHighRiskAddressDescription(parser);
						} else if (text == 'businessAddressRcd') {
							businessAddressRcd = arrayOfRecommendedNextActions(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Detail consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class StandardizedAddressRcd {
        @AuraEnabled
		public String surname {get;set;} 
        @AuraEnabled
		public String firstName {get;set;} 
        @AuraEnabled
		public String address {get;set;} 
        @AuraEnabled
		public String city {get;set;} 
        @AuraEnabled
		public String state {get;set;} 
        @AuraEnabled
		public String zipCode {get;set;} 

		public StandardizedAddressRcd(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'surname') {
							surname = parser.getText();
						} else if (text == 'firstName') {
							firstName = parser.getText();
						} else if (text == 'address') {
							address = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'zipCode') {
							zipCode = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'StandardizedAddressRcd consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Counts {
        @AuraEnabled
		public Integer standardizedAddressReturnCount {get;set;} 
        @AuraEnabled
		public Integer residentialAddressMatchCount {get;set;} 
        @AuraEnabled
		public Integer residentialAddressReturnCount {get;set;} 
        @AuraEnabled
		public Integer highRiskAddressReturnCount {get;set;} 
        @AuraEnabled
		public Integer businessAddressMatchCount {get;set;} 
        @AuraEnabled
		public Integer businessAddressReturnCount {get;set;} 

		public Counts(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'standardizedAddressReturnCount') {
							standardizedAddressReturnCount = parser.getIntegerValue();
						} else if (text == 'residentialAddressMatchCount') {
							residentialAddressMatchCount = parser.getIntegerValue();
						} else if (text == 'residentialAddressReturnCount') {
							residentialAddressReturnCount = parser.getIntegerValue();
						} else if (text == 'highRiskAddressReturnCount') {
							highRiskAddressReturnCount = parser.getIntegerValue();
						} else if (text == 'businessAddressMatchCount') {
							businessAddressMatchCount = parser.getIntegerValue();
						} else if (text == 'businessAddressReturnCount') {
							businessAddressReturnCount = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Counts consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Matches {
        @AuraEnabled
		public String name {get;set;} 
        @AuraEnabled
		public String value {get;set;} 

		public Matches(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'value') {
							value = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Matches consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class GlbDetail {
        @AuraEnabled
		public FraudShield fraudShield {get;set;} 

		public GlbDetail(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fraudShield') {
							fraudShield = new FraudShield(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'GlbDetail consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ChangeOfAddresses {
        @AuraEnabled
		public List<ChangeOfAddress> changeOfAddress {get;set;} 

		public ChangeOfAddresses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'changeOfAddress') {
							changeOfAddress = arrayOfChangeOfAddress(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ChangeOfAddresses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Decisions {
        @AuraEnabled
		public String element {get;set;} 
        @AuraEnabled
		public String value {get;set;} 
        @AuraEnabled
		public String reason {get;set;} 

		public Decisions(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'element') {
							element = parser.getText();
						} else if (text == 'value') {
							value = parser.getText();
						} else if (text == 'reason') {
							reason = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Decisions consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Kba {
        @AuraEnabled
		public General general {get;set;} 
        @AuraEnabled
		public List<QuestionSet> questionSet {get;set;} 
        @AuraEnabled
		public List<RecommendedNextActions> creditQuestionSet {get;set;} 
        @AuraEnabled
		public List<RecommendedNextActions> nonCreditQuestionSet {get;set;} 

		public Kba(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'general') {
							general = new General(parser);
						} else if (text == 'questionSet') {
							questionSet = arrayOfQuestionSet(parser);
						} else if (text == 'creditQuestionSet') {
							creditQuestionSet = arrayOfRecommendedNextActions(parser);
						} else if (text == 'nonCreditQuestionSet') {
							nonCreditQuestionSet = arrayOfRecommendedNextActions(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Kba consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary_Z {
        @AuraEnabled
		public FullNameVerifiesToAddress verificationResult {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress type_Z {get;set;} // in json: type
        @AuraEnabled
		public FullNameVerifiesToAddress unitMismatchResult {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress highRiskResult {get;set;} 
        @AuraEnabled
		public Counts counts {get;set;} 

		public Summary_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'verificationResult') {
							verificationResult = new FullNameVerifiesToAddress(parser);
						} else if (text == 'type') {
							type_Z = new FullNameVerifiesToAddress(parser);
						} else if (text == 'unitMismatchResult') {
							unitMismatchResult = new FullNameVerifiesToAddress(parser);
						} else if (text == 'highRiskResult') {
							highRiskResult = new FullNameVerifiesToAddress(parser);
						} else if (text == 'counts') {
							counts = new Counts(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Summary_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary_Y {
        @AuraEnabled
		public FullNameVerifiesToAddress verificationResult {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress classification {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress highRiskResult {get;set;} 
        @AuraEnabled
		public Counts_Z counts {get;set;} 

		public Summary_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'verificationResult') {
							verificationResult = new FullNameVerifiesToAddress(parser);
						} else if (text == 'classification') {
							classification = new FullNameVerifiesToAddress(parser);
						} else if (text == 'highRiskResult') {
							highRiskResult = new FullNameVerifiesToAddress(parser);
						} else if (text == 'counts') {
							counts = new Counts_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Summary_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Names {
        @AuraEnabled
		public String firstName {get;set;} 
        @AuraEnabled
		public String id {get;set;} 
        /*
        @AuraEnabled
		public String middleNames {get;set;} 
        @AuraEnabled
		public String nameSuffix {get;set;}
		*/
        @AuraEnabled
		public String surName {get;set;} 

		public Names(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'firstName') {
							firstName = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} /*else if (text == 'middleNames') {
							middleNames = parser.getText();
						} else if (text == 'nameSuffix') {
							nameSuffix = parser.getText();
						}*/ else if (text == 'surName') {
							surName = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Names consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PersonDetails {
        @AuraEnabled
		public String age {get;set;} 
        @AuraEnabled
		public String dateOfBirth {get;set;} 
        @AuraEnabled
		public String gender {get;set;} 
        @AuraEnabled
		public String mothersMaidenName {get;set;} 
        @AuraEnabled
		public String noOfDependents {get;set;}
        @AuraEnabled
		public String occupancyStatus {get;set;} 
        @AuraEnabled
		public String spouseName {get;set;} 
        @AuraEnabled
		public String yearOfBirth {get;set;} 

		public PersonDetails(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'age') {
							age = parser.getText();
						} else if (text == 'dateOfBirth') {
							dateOfBirth = parser.getText();
						} else if (text == 'gender') {
							gender = parser.getText();
						} else if (text == 'mothersMaidenName') {
							mothersMaidenName = parser.getText();
						} else if (text == 'noOfDependents') {
							noOfDependents = parser.getText();
						} else if (text == 'occupancyStatus') {
							occupancyStatus = parser.getText();
						} else if (text == 'spouseName') {
							spouseName = parser.getText();
						} else if (text == 'yearOfBirth') {
							yearOfBirth = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'PersonDetails consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Control {
        @AuraEnabled
		public String option {get;set;} 
        @AuraEnabled
		public String value {get;set;} 

		public Control(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'option') {
							option = parser.getText();
						} else if (text == 'value') {
							value = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Control consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class OtherData {
        @AuraEnabled
		public Json json {get;set;} 

		public OtherData(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'json') {
							json = new Json(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'OtherData consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Phone {
        @AuraEnabled
		public Summary_Y summary {get;set;} 
        @AuraEnabled
		public Detail_Z detail {get;set;} 

		public Phone(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary_Y(parser);
						} else if (text == 'detail') {
							detail = new Detail_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Phone consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ProductDetails {
        @AuraEnabled
		public String productType {get;set;} 

		public ProductDetails(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'productType') {
							productType = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ProductDetails consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ConsumerID {
        @AuraEnabled
		public Summary_X summary {get;set;} 
        @AuraEnabled
		public Detail_Y detail {get;set;} 

		public ConsumerID(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary_X(parser);
						} else if (text == 'detail') {
							detail = new Detail_Y(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ConsumerID consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ResidentialPhoneRcd {
        @AuraEnabled
		public String surname {get;set;} 
        @AuraEnabled
		public String firstName {get;set;} 
        @AuraEnabled
		public List<RecommendedNextActions> aliasName {get;set;} 
        @AuraEnabled
		public String address {get;set;} 
        @AuraEnabled
		public String city {get;set;} 
        @AuraEnabled
		public String state {get;set;}
        @AuraEnabled
		public String zipCode {get;set;} 
        @AuraEnabled
		public String zipPlus4 {get;set;} 
        @AuraEnabled
		public String areaCode {get;set;} 
        @AuraEnabled
		public String phone {get;set;} 
        @AuraEnabled
		public OtherHouseholdMembers otherHouseholdMembers {get;set;}
        @AuraEnabled
		public String lastUpdatedDate {get;set;} 

		public ResidentialPhoneRcd(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'surname') {
							surname = parser.getText();
						} else if (text == 'firstName') {
							firstName = parser.getText();
						} else if (text == 'aliasName') {
							aliasName = arrayOfRecommendedNextActions(parser);
						} else if (text == 'address') {
							address = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'zipCode') {
							zipCode = parser.getText();
						} else if (text == 'zipPlus4') {
							zipPlus4 = parser.getText();
						} else if (text == 'areaCode') {
							areaCode = parser.getText();
						} else if (text == 'phone') {
							phone = parser.getText();
						} else if (text == 'otherHouseholdMembers') {
							otherHouseholdMembers = new OtherHouseholdMembers(parser);
						} else if (text == 'lastUpdatedDate') {
							lastUpdatedDate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ResidentialPhoneRcd consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Ssnfinder {
        @AuraEnabled
		public Summary_R summary {get;set;} 

		public Ssnfinder(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary_R(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Ssnfinder consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class FraudShield {
        @AuraEnabled
		public List<FullNameVerifiesToAddress> indicator {get;set;} 

		public FraudShield(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'indicator') {
							indicator = arrayOfFullNameVerifiesToAddress(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'FraudShield consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class OverallResponse {
        @AuraEnabled
		public String decision {get;set;} 
        @AuraEnabled
		public String decisionText {get;set;} 
        @AuraEnabled
		public List<String> decisionReasons {get;set;} 
        @AuraEnabled
		public List<RecommendedNextActions> recommendedNextActions {get;set;} 
        @AuraEnabled
		public List<RecommendedNextActions> spareObjects {get;set;} 

		public OverallResponse(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'decision') {
							decision = parser.getText();
						} else if (text == 'decisionText') {
							decisionText = parser.getText();
						} else if (text == 'decisionReasons') {
							decisionReasons = arrayOfString(parser);
						} else if (text == 'recommendedNextActions') {
							recommendedNextActions = arrayOfRecommendedNextActions(parser);
						} else if (text == 'spareObjects') {
							spareObjects = arrayOfRecommendedNextActions(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'OverallResponse consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ConsumerIDRcd {
        @AuraEnabled
		public String surname {get;set;} 
        @AuraEnabled
		public String firstName {get;set;} 
        @AuraEnabled
		public List<RecommendedNextActions> aliasName {get;set;} 
        @AuraEnabled
		public String address {get;set;} 
        @AuraEnabled
		public String city {get;set;} 
		@AuraEnabled
        public String state {get;set;} 
        @AuraEnabled
		public String zipCode {get;set;} 
        @AuraEnabled
		public String zipPlus4 {get;set;} 
        @AuraEnabled
		public String areaCode {get;set;} 
        @AuraEnabled
		public String phone {get;set;} 
        @AuraEnabled
		public String reportedDate {get;set;} 
        @AuraEnabled
		public String lastUpdatedDate {get;set;} 

		public ConsumerIDRcd(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'surname') {
							surname = parser.getText();
						} else if (text == 'firstName') {
							firstName = parser.getText();
						} else if (text == 'aliasName') {
							aliasName = arrayOfRecommendedNextActions(parser);
						} else if (text == 'address') {
							address = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'zipCode') {
							zipCode = parser.getText();
						} else if (text == 'zipPlus4') {
							zipPlus4 = parser.getText();
						} else if (text == 'areaCode') {
							areaCode = parser.getText();
						} else if (text == 'phone') {
							phone = parser.getText();
						} else if (text == 'reportedDate') {
							reportedDate = parser.getText();
						} else if (text == 'lastUpdatedDate') {
							lastUpdatedDate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ConsumerIDRcd consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class OrchestrationDecisions {
        @AuraEnabled
		public String sequenceId {get;set;} 
        @AuraEnabled
		public String decisionSource {get;set;} 
        @AuraEnabled
		public String decision {get;set;} 
        @AuraEnabled
		public List<String> decisionReasons {get;set;} 
        @AuraEnabled
		public Integer score {get;set;} 
        @AuraEnabled
		public String decisionText {get;set;} 
        @AuraEnabled
		public String nextAction {get;set;} 
        @AuraEnabled
		public String appReference {get;set;} 
        @AuraEnabled
		public String decisionTime {get;set;} 

		public OrchestrationDecisions(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sequenceId') {
							sequenceId = parser.getText();
						} else if (text == 'decisionSource') {
							decisionSource = parser.getText();
						} else if (text == 'decision') {
							decision = parser.getText();
						} else if (text == 'decisionReasons') {
							decisionReasons = arrayOfString(parser);
						} else if (text == 'score') {
							score = parser.getIntegerValue();
						} else if (text == 'decisionText') {
							decisionText = parser.getText();
						} else if (text == 'nextAction') {
							nextAction = parser.getText();
						} else if (text == 'appReference') {
							appReference = parser.getText();
						} else if (text == 'decisionTime') {
							decisionTime = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'OrchestrationDecisions consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Answers {
        @AuraEnabled
		public String outWalletAnswer1 {get;set;} 
        @AuraEnabled
		public String outWalletAnswer2 {get;set;} 
        @AuraEnabled
		public String outWalletAnswer3 {get;set;} 
        @AuraEnabled
		public String outWalletAnswer4 {get;set;} 
        @AuraEnabled
		public String outWalletAnswer5 {get;set;}
        @AuraEnabled
		public String outWalletAnswer6 {get;set;} 
        @AuraEnabled
		public String outWalletAnswer7 {get;set;} 
        @AuraEnabled
		public String outWalletAnswer8 {get;set;} 
        @AuraEnabled
		public String outWalletAnswer9 {get;set;}
        
		public Answers(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'outWalletAnswer1') {
							outWalletAnswer1 = parser.getText();
						} else if (text == 'outWalletAnswer2') {
							outWalletAnswer2 = parser.getText();
						} else if (text == 'outWalletAnswer3') {
							outWalletAnswer3 = parser.getText();
						} else if (text == 'outWalletAnswer4') {
							outWalletAnswer4 = parser.getText();
						} else if (text == 'outWalletAnswer5') {
							outWalletAnswer5 = parser.getText();
						} else if (text == 'outWalletAnswer6') {
							outWalletAnswer6 = parser.getText();
						} else if (text == 'outWalletAnswer7') {
							outWalletAnswer7 = parser.getText();
						} else if (text == 'outWalletAnswer8') {
							outWalletAnswer8 = parser.getText();
						} else if (text == 'outWalletAnswer9') {
							outWalletAnswer9 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Answers consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ScoreSummary {
        @AuraEnabled
		public String acceptReferCode {get;set;} 
        @AuraEnabled
		public String decisionOverrideIndicator {get;set;} 
        @AuraEnabled
		public String preciseIDScore {get;set;} 
        @AuraEnabled
		public String outWalletScore {get;set;} 
        @AuraEnabled
		public String outWalletFormula {get;set;} 
        @AuraEnabled
		public String progressiveQuestionAchieved {get;set;} 
        @AuraEnabled
		public String championChallengerIndicator {get;set;} 
        @AuraEnabled
		public String riskStrategyNum {get;set;} 
        @AuraEnabled
		public String riskStrategyDescription {get;set;} 
        @AuraEnabled
		public String questionConfigNum {get;set;} 
        @AuraEnabled
		public String questionConfigDescription {get;set;} 
        @AuraEnabled
		public String decisionMatrixNum {get;set;} 
        @AuraEnabled
		public String decisionMatrixDescription {get;set;} 

		public ScoreSummary(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'acceptReferCode') {
							acceptReferCode = parser.getText();
						} else if (text == 'decisionOverrideIndicator') {
							decisionOverrideIndicator = parser.getText();
						} else if (text == 'preciseIDScore') {
							preciseIDScore = parser.getText();
						} else if (text == 'outWalletScore') {
							outWalletScore = parser.getText();
						} else if (text == 'outWalletFormula') {
							outWalletFormula = parser.getText();
						} else if (text == 'progressiveQuestionAchieved') {
							progressiveQuestionAchieved = parser.getText();
						} else if (text == 'championChallengerIndicator') {
							championChallengerIndicator = parser.getText();
						} else if (text == 'riskStrategyNum') {
							riskStrategyNum = parser.getText();
						} else if (text == 'riskStrategyDescription') {
							riskStrategyDescription = parser.getText();
						} else if (text == 'questionConfigNum') {
							questionConfigNum = parser.getText();
						} else if (text == 'questionConfigDescription') {
							questionConfigDescription = parser.getText();
						} else if (text == 'decisionMatrixNum') {
							decisionMatrixNum = parser.getText();
						} else if (text == 'decisionMatrixDescription') {
							decisionMatrixDescription = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ScoreSummary consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class HighRiskAddressDescription {
        @AuraEnabled
		public String highRiskDescription {get;set;} 

		public HighRiskAddressDescription(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'highRiskDescription') {
							highRiskDescription = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'HighRiskAddressDescription consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PreviousAddressRcd {
        @AuraEnabled
		public String address {get;set;} 
        @AuraEnabled
		public String city {get;set;} 
        @AuraEnabled
		public String state {get;set;} 
        @AuraEnabled
		public String zipCode {get;set;} 
        @AuraEnabled
		public String zipPlus4 {get;set;} 
        @AuraEnabled
		public String reportedDate {get;set;} 
        @AuraEnabled
		public String lastUpdatedDate {get;set;} 

		public PreviousAddressRcd(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'address') {
							address = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'zipCode') {
							zipCode = parser.getText();
						} else if (text == 'zipPlus4') {
							zipPlus4 = parser.getText();
						} else if (text == 'reportedDate') {
							reportedDate = parser.getText();
						} else if (text == 'lastUpdatedDate') {
							lastUpdatedDate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'PreviousAddressRcd consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Kba_Z {
        @AuraEnabled
		public Answers answers {get;set;} 
        @AuraEnabled
		public String championChallengerRandomNumber {get;set;} 
        @AuraEnabled
		public String languageCode {get;set;} 
        @AuraEnabled
		public String outWalletQuestionsRequest {get;set;} 
        @AuraEnabled
		public String riskStrategyNumber {get;set;} 
        @AuraEnabled
		public String sessionId {get;set;} 

		public Kba_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'answers') {
							answers = new Answers(parser);
						} else if (text == 'championChallengerRandomNumber') {
							championChallengerRandomNumber = parser.getText();
						} else if (text == 'languageCode') {
							languageCode = parser.getText();
						} else if (text == 'outWalletQuestionsRequest') {
							outWalletQuestionsRequest = parser.getText();
						} else if (text == 'riskStrategyNumber') {
							riskStrategyNumber = parser.getText();
						} else if (text == 'sessionId') {
							sessionId = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Kba_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class FullNameVerifiesToAddress {
        @AuraEnabled
		public String value {get;set;} 
        @AuraEnabled
		public String code {get;set;} 

		public FullNameVerifiesToAddress(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'value') {
							value = parser.getText();
						} else if (text == 'code') {
							code = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'FullNameVerifiesToAddress consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ResidentialAddressRcd {
        @AuraEnabled
		public String surname {get;set;} 
        @AuraEnabled
		public String firstName {get;set;} 
        @AuraEnabled
		public List<RecommendedNextActions> aliasName {get;set;} 
        @AuraEnabled
		public String address {get;set;} 
        @AuraEnabled
		public String city {get;set;} 
        @AuraEnabled
		public String state {get;set;} 
        @AuraEnabled
		public String zipCode {get;set;} 
        @AuraEnabled
		public String zipPlus4 {get;set;} 
        @AuraEnabled
		public String lastUpdatedDate {get;set;} 
        @AuraEnabled
		public String areaCode {get;set;}
        @AuraEnabled
		public String phone {get;set;} 
        @AuraEnabled
		public OtherHouseholdMembers otherHouseholdMembers {get;set;}
        @AuraEnabled
		public String monthsAtResidence {get;set;} 

		public ResidentialAddressRcd(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'surname') {
							surname = parser.getText();
						} else if (text == 'firstName') {
							firstName = parser.getText();
						} else if (text == 'aliasName') {
							aliasName = arrayOfRecommendedNextActions(parser);
						} else if (text == 'address') {
							address = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'zipCode') {
							zipCode = parser.getText();
						} else if (text == 'zipPlus4') {
							zipPlus4 = parser.getText();
						} else if (text == 'lastUpdatedDate') {
							lastUpdatedDate = parser.getText();
						} else if (text == 'areaCode') {
							areaCode = parser.getText();
						} else if (text == 'phone') {
							phone = parser.getText();
						} else if (text == 'otherHouseholdMembers') {
							otherHouseholdMembers = new OtherHouseholdMembers(parser);
						} else if (text == 'monthsAtResidence') {
							monthsAtResidence = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ResidentialAddressRcd consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary_V {
        @AuraEnabled
		public FullNameVerifiesToAddress verificationResult {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress formatValidation {get;set;} 

		public Summary_V(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'verificationResult') {
							verificationResult = new FullNameVerifiesToAddress(parser);
						} else if (text == 'formatValidation') {
							formatValidation = new FullNameVerifiesToAddress(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Summary_V consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Response {
        @AuraEnabled
		public Products products {get;set;} 

		public Response(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'products') {
							products = new Products(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Response consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ClientResponsePayload {
        @AuraEnabled
		public List<OrchestrationDecisions> orchestrationDecisions {get;set;} 
        @AuraEnabled
		public List<DecisionElements> decisionElements {get;set;} 

		public ClientResponsePayload(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'orchestrationDecisions') {
							orchestrationDecisions = arrayOfOrchestrationDecisions(parser);
						} else if (text == 'decisionElements') {
							decisionElements = arrayOfDecisionElements(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ClientResponsePayload consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary_U {
        @AuraEnabled
		public FullNameVerifiesToAddress verificationResult {get;set;} 
        @AuraEnabled
		public Counts_X counts {get;set;} 

		public Summary_U(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'verificationResult') {
							verificationResult = new FullNameVerifiesToAddress(parser);
						} else if (text == 'counts') {
							counts = new Counts_X(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Summary_U consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	/*public class IdentityDocuments {
        @AuraEnabled
		public String documentNumber {get;set;} 
        @AuraEnabled
		public String documentType {get;set;} 
        @AuraEnabled
		public String hashedDocumentNumber {get;set;} 

		public IdentityDocuments(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'documentNumber') {
							documentNumber = parser.getText();
						} else if (text == 'documentType') {
							documentType = parser.getText();
						} else if (text == 'hashedDocumentNumber') {
							hashedDocumentNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'IdentityDocuments consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	*/
	public class Summary_X {
        @AuraEnabled
		public FullNameVerifiesToAddress verificationResult {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress deceasedResult {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress formatResult {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress issueResult {get;set;} 
        @AuraEnabled
		public String issueState {get;set;} 
        @AuraEnabled
		public String issueStartRange {get;set;} 
        @AuraEnabled
		public String issueEndRange {get;set;} 
        @AuraEnabled
		public Counts_Y counts {get;set;} 

		public Summary_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'verificationResult') {
							verificationResult = new FullNameVerifiesToAddress(parser);
						} else if (text == 'deceasedResult') {
							deceasedResult = new FullNameVerifiesToAddress(parser);
						} else if (text == 'formatResult') {
							formatResult = new FullNameVerifiesToAddress(parser);
						} else if (text == 'issueResult') {
							issueResult = new FullNameVerifiesToAddress(parser);
						} else if (text == 'issueState') {
							issueState = parser.getText();
						} else if (text == 'issueStartRange') {
							issueStartRange = parser.getText();
						} else if (text == 'issueEndRange') {
							issueEndRange = parser.getText();
						} else if (text == 'counts') {
							counts = new Counts_Y(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Summary_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary_W {
        @AuraEnabled
		public FullNameVerifiesToAddress matchResult {get;set;} 
        @AuraEnabled
		public String monthOfBirth {get;set;} 
        @AuraEnabled
		public String dayOfBirth {get;set;} 
        @AuraEnabled
		public String yearOfBirth {get;set;} 

		public Summary_W(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'matchResult') {
							matchResult = new FullNameVerifiesToAddress(parser);
						} else if (text == 'monthOfBirth') {
							monthOfBirth = parser.getText();
						} else if (text == 'dayOfBirth') {
							dayOfBirth = parser.getText();
						} else if (text == 'yearOfBirth') {
							yearOfBirth = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Summary_W consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary_R {
        @AuraEnabled
		public Counts_U counts {get;set;} 

		public Summary_R(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'counts') {
							counts = new Counts_U(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Summary_R consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contacts {
        @AuraEnabled
		public List<Addresses_Z> addresses {get;set;} 
        /*
        @AuraEnabled
		public List<Emails> emails {get;set;}
		*/
        @AuraEnabled
		public String id {get;set;} 
        /*@AuraEnabled
		public List<IdentityDocuments> identityDocuments {get;set;}
		*/
        @AuraEnabled
		public Person person {get;set;} 
        @AuraEnabled
		public List<Telephones> telephones {get;set;} 

		public Contacts(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'addresses') {
							addresses = arrayOfAddresses_Z(parser);
						}/* else if (text == 'emails') {
							emails = arrayOfEmails(parser);
						}*/ else if (text == 'id') {
							id = parser.getText();
						} /*else if (text == 'identityDocuments') {
							identityDocuments = arrayOfIdentityDocuments(parser);
						}*/ else if (text == 'person') {
							person = new Person(parser);
						} else if (text == 'telephones') {
							telephones = arrayOfTelephones(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Contacts consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary_T {
        @AuraEnabled
		public FullNameVerifiesToAddress verificationResult {get;set;} 
        @AuraEnabled
		public Counts_W counts {get;set;} 

		public Summary_T(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'verificationResult') {
							verificationResult = new FullNameVerifiesToAddress(parser);
						} else if (text == 'counts') {
							counts = new Counts_W(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Summary_T consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Telephones {
        @AuraEnabled
		public String id {get;set;} 
        @AuraEnabled
		public String telnumber {get;set;} // in json: number

		public Telephones(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'number') {
							telnumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Telephones consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary_S {
        @AuraEnabled
		public Counts_V counts {get;set;} 

		public Summary_S(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'counts') {
							counts = new Counts_V(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Summary_S consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary {
        @AuraEnabled
		public String transactionID {get;set;} 
        @AuraEnabled
		public String initialDecision {get;set;} 
        @AuraEnabled
		public String finalDecision {get;set;} 
        @AuraEnabled
		public CrossReferenceIndicatorsGrid crossReferenceIndicatorsGrid {get;set;} 
        @AuraEnabled
		public FullNameVerifiesToAddress dateOfBirthMatch {get;set;} 

		public Summary(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'transactionID') {
							transactionID = parser.getText();
						} else if (text == 'initialDecision') {
							initialDecision = parser.getText();
						} else if (text == 'finalDecision') {
							finalDecision = parser.getText();
						} else if (text == 'crossReferenceIndicatorsGrid') {
							crossReferenceIndicatorsGrid = new CrossReferenceIndicatorsGrid(parser);
						} else if (text == 'dateOfBirthMatch') {
							dateOfBirthMatch = new FullNameVerifiesToAddress(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Summary consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PreviousAddresses {
        @AuraEnabled
		public List<PreviousAddress> previousAddress {get;set;} 

		public PreviousAddresses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'previousAddress') {
							previousAddress = arrayOfPreviousAddress(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'PreviousAddresses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Ofac {
        @AuraEnabled
		public Summary_T summary {get;set;} 

		public Ofac(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary_T(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Ofac consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ValidateOTP {
        @AuraEnabled
		public String otp {get;set;} 
        @AuraEnabled
		public String otpMatchResult {get;set;} 

		public ValidateOTP(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'otp') {
							otp = parser.getText();
						} else if (text == 'otpMatchResult') {
							otpMatchResult = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ValidateOTP consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public static AGN_DSRM_Experian_Response parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new AGN_DSRM_Experian_Response(parser);
	}
	
    @AuraEnabled
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

    private static List<Names> arrayOfNames(System.JSONParser p) {
        List<Names> res = new List<Names>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Names(p));
        }
        return res;
    }

    private static List<PreviousAddress> arrayOfPreviousAddress(System.JSONParser p) {
        List<PreviousAddress> res = new List<PreviousAddress>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new PreviousAddress(p));
        }
        return res;
    }

    private static List<Decisions> arrayOfDecisions(System.JSONParser p) {
        List<Decisions> res = new List<Decisions>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Decisions(p));
        }
        return res;
    }

    private static List<Phone> arrayOfPhone(System.JSONParser p) {
        List<Phone> res = new List<Phone>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Phone(p));
        }
        return res;
    }

    private static List<Addresses_Z> arrayOfAddresses_Z(System.JSONParser p) {
        List<Addresses_Z> res = new List<Addresses_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Addresses_Z(p));
        }
        return res;
    }

    private static List<PreviousAddressRcd> arrayOfPreviousAddressRcd(System.JSONParser p) {
        List<PreviousAddressRcd> res = new List<PreviousAddressRcd>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new PreviousAddressRcd(p));
        }
        return res;
    }

    private static List<OrchestrationDecisions> arrayOfOrchestrationDecisions(System.JSONParser p) {
        List<OrchestrationDecisions> res = new List<OrchestrationDecisions>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new OrchestrationDecisions(p));
        }
        return res;
    }
	/*
    private static List<Emails> arrayOfEmails(System.JSONParser p) {
        List<Emails> res = new List<Emails>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Emails(p));
        }
        return res;
    }
	*/
    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }

    private static List<ResidentialAddressRcd> arrayOfResidentialAddressRcd(System.JSONParser p) {
        List<ResidentialAddressRcd> res = new List<ResidentialAddressRcd>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ResidentialAddressRcd(p));
        }
        return res;
    }

    private static List<Address> arrayOfAddress(System.JSONParser p) {
        List<Address> res = new List<Address>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Address(p));
        }
        return res;
    }

    private static List<Scores> arrayOfScores(System.JSONParser p) {
        List<Scores> res = new List<Scores>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Scores(p));
        }
        return res;
    }

    /*private static List<IdentityDocuments> arrayOfIdentityDocuments(System.JSONParser p) {
        List<IdentityDocuments> res = new List<IdentityDocuments>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new IdentityDocuments(p));
        }
        return res;
    }
	*/
    private static List<ResidentialPhoneRcd> arrayOfResidentialPhoneRcd(System.JSONParser p) {
        List<ResidentialPhoneRcd> res = new List<ResidentialPhoneRcd>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ResidentialPhoneRcd(p));
        }
        return res;
    }

    private static List<Matches> arrayOfMatches(System.JSONParser p) {
        List<Matches> res = new List<Matches>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Matches(p));
        }
        return res;
    }

    private static List<QuestionSet> arrayOfQuestionSet(System.JSONParser p) {
        List<QuestionSet> res = new List<QuestionSet>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new QuestionSet(p));
        }
        return res;
    }

    private static List<ChangeOfAddress> arrayOfChangeOfAddress(System.JSONParser p) {
        List<ChangeOfAddress> res = new List<ChangeOfAddress>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ChangeOfAddress(p));
        }
        return res;
    }

    private static List<ConsumerIDRcd> arrayOfConsumerIDRcd(System.JSONParser p) {
        List<ConsumerIDRcd> res = new List<ConsumerIDRcd>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ConsumerIDRcd(p));
        }
        return res;
    }

    private static List<Control> arrayOfControl(System.JSONParser p) {
        List<Control> res = new List<Control>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Control(p));
        }
        return res;
    }

    private static List<DecisionElements> arrayOfDecisionElements(System.JSONParser p) {
        List<DecisionElements> res = new List<DecisionElements>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new DecisionElements(p));
        }
        return res;
    }

    private static List<FullNameVerifiesToAddress> arrayOfFullNameVerifiesToAddress(System.JSONParser p) {
        List<FullNameVerifiesToAddress> res = new List<FullNameVerifiesToAddress>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new FullNameVerifiesToAddress(p));
        }
        return res;
    }

    private static List<RecommendedNextActions> arrayOfRecommendedNextActions(System.JSONParser p) {
        List<RecommendedNextActions> res = new List<RecommendedNextActions>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new RecommendedNextActions(p));
        }
        return res;
    }

    private static List<Contacts> arrayOfContacts(System.JSONParser p) {
        List<Contacts> res = new List<Contacts>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Contacts(p));
        }
        return res;
    }

    private static List<Telephones> arrayOfTelephones(System.JSONParser p) {
        List<Telephones> res = new List<Telephones>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Telephones(p));
        }
        return res;
    }

    private static List<HighRiskAddressDescription> arrayOfHighRiskAddressDescription(System.JSONParser p) {
        List<HighRiskAddressDescription> res = new List<HighRiskAddressDescription>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new HighRiskAddressDescription(p));
        }
        return res;
    }
}