//
// Generated by AGN_OktaUserGroupsSuccessResponse
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class AGN_OktaUserGroupsSuccessResponse {

	public String id {get;set;} 
	public String created {get;set;} 
	public String lastUpdated {get;set;} 
	public String lastMembershipUpdated {get;set;} 
	public List<String> objectClass {get;set;} 
	public String type_Z {get;set;} // in json: type
	public Profile profile {get;set;} 
	public Links x_links {get;set;} // in json: _links

	public AGN_OktaUserGroupsSuccessResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'id') {
						id = parser.getText();
					} else if (text == 'created') {
						created = parser.getText();
					} else if (text == 'lastUpdated') {
						lastUpdated = parser.getText();
					} else if (text == 'lastMembershipUpdated') {
						lastMembershipUpdated = parser.getText();
					} else if (text == 'objectClass') {
						objectClass = arrayOfString(parser);
					} else if (text == 'type') {
						type_Z = parser.getText();
					} else if (text == 'profile') {
						profile = new Profile(parser);
					} else if (text == '_links') {
						x_links = new Links(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'AGN_OktaUserGroupsSuccessResponse consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Links {
		public List<Logo> logo {get;set;} 
		public Users users {get;set;} 
		public Users apps {get;set;} 

		public Links(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'logo') {
							logo = arrayOfLogo(parser);
						} else if (text == 'users') {
							users = new Users(parser);
						} else if (text == 'apps') {
							apps = new Users(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Links consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Users {
		public String href {get;set;} 

		public Users(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'href') {
							href = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Users consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Profile {
		public String name {get;set;} 
		public String description {get;set;} 

		public Profile(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Profile consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Logo {
		public String name {get;set;} 
		public String href {get;set;} 
		public String type_Z {get;set;} // in json: type

		public Logo(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'href') {
							href = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Logo consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static List<AGN_OktaUserGroupsSuccessResponse> parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return arrayOfJSON2Apex(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

    private static List<AGN_OktaUserGroupsSuccessResponse> arrayOfJSON2Apex(System.JSONParser p) {
        List<AGN_OktaUserGroupsSuccessResponse> res = new List<AGN_OktaUserGroupsSuccessResponse>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new AGN_OktaUserGroupsSuccessResponse(p));
        }
        return res;
    }



    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }



    private static List<Logo> arrayOfLogo(System.JSONParser p) {
        List<Logo> res = new List<Logo>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Logo(p));
        }
        return res;
    }
}