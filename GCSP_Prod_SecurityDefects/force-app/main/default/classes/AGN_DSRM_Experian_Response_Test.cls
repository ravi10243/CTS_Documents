//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

@IsTest
public class AGN_DSRM_Experian_Response_Test {
	
	// This test method should give 100% coverage
	static testMethod void testParse() {
		String json = '{'+
		'  \"responseHeader\": {'+
		'    \"requestType\": \"PreciseIdOnly\",'+
		'    \"clientReferenceId\": \"JSON - PO 22 Inquiry\",'+
		'    \"expRequestId\": \"RB000031038484\",'+
		'    \"messageTime\": \"2019-04-17T00:00:01Z\",'+
		'    \"overallResponse\": {'+
		'      \"decision\": \"ACCEPT\",'+
		'      \"decisionText\": \"Continue\",'+
		'      \"decisionReasons\": ['+
		'        \"PreciseId - Accept\"'+
		'      ],'+
		'      \"recommendedNextActions\": ['+
		'        '+
		'      ],'+
		'      \"spareObjects\": ['+
		'        '+
		'      ]'+
		'    },'+
		'    \"responseCode\": \"R0201\",'+
		'    \"responseType\": \"INFO\",'+
		'    \"responseMessage\": \"Workflow Complete.\",'+
		'    \"tenantID\": \"TENANT1\"'+
		'  },'+
		'  \"clientResponsePayload\": {'+
		'    \"orchestrationDecisions\": ['+
		'      {'+
		'        \"sequenceId\": \"1\",'+
		'        \"decisionSource\": \"PreciseID\",'+
		'        \"decision\": \"ACCEPT\",'+
		'        \"decisionReasons\": ['+
		'          \"PreciseId - Accept\"'+
		'        ],'+
		'        \"score\": 0,'+
		'        \"decisionText\": \"Continue\",'+
		'        \"nextAction\": \"Continue\",'+
		'        \"appReference\": \"56026616\",'+
		'        \"decisionTime\": \"2019-04-17T15:43:55Z\"'+
		'      }'+
		'    ],'+
		'    \"decisionElements\": ['+
		'      {'+
		'        \"serviceName\": \"PreciseId\",'+
		'        \"applicantId\": \"APPLICANT_CONTACT_ID_1\",'+
		'        \"decision\": \"ACC\",'+
		'        \"decisionText\": \"Accept\",'+
		'        \"appReference\": \"56026616\",'+
		'        \"otherData\": {'+
		'          \"json\": {'+
		'            \"fraudSolutions\": {'+
		'              \"response\": {'+
		'                \"products\": {'+
		'                  \"preciseIDServer\": {'+
		'                    \"sessionID\": \"9C5EJU68OX4HMIJVOTB5ZFST.pidd2v-190417104301297044784\",'+
		'                    \"header\": {'+
		'                      \"reportDate\": \"04172019\",'+
		'                      \"reportTime\": \"104303\",'+
		'                      \"productOption\": \"22\",'+
		'                      \"subcode\": \"1234567\",'+
		'                      \"referenceNumber\": \"JSON - PO 22 Inquiry\"'+
		'                    },'+
		'                    \"summary\": {'+
		'                      \"transactionID\": \"56026616\",'+
		'                      \"initialDecision\": \"ACC\",'+
		'                      \"finalDecision\": \"ACC\",'+
		'                      \"crossReferenceIndicatorsGrid\": {'+
		'                        \"fullNameVerifiesToAddress\": {'+
		'                          \"value\": \"Match\",'+
		'                          \"code\": \"MA\"'+
		'                        },'+
		'                        \"fullNameVerifiesToSSN\": {'+
		'                          \"value\": \"Match\",'+
		'                          \"code\": \"MA\"'+
		'                        },'+
		'                        \"fullNameVerifiesToDL\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"fullNameVerifiesToPhone\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"surnameOnlyVerifiesToAddress\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"surnameOnlyVerifiesToSSN\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"surnameOnlyVerifiesToDL\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"surnameOnlyVerifiesToPhone\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"addressVerifiesToFullName\": {'+
		'                          \"value\": \"Match\",'+
		'                          \"code\": \"MA\"'+
		'                        },'+
		'                        \"addressVerifiesToSurnameOnly\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"addressVerifiesToSSN\": {'+
		'                          \"value\": \"Match\",'+
		'                          \"code\": \"MA\"'+
		'                        },'+
		'                        \"addressVerifiesToDL\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"addressVerifiesToPhone\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"phoneVerifiesToFullName\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"phoneVerifiesToSurnameOnly\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"phoneVerifiesToAddress\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"ssnVerifiesToFullName\": {'+
		'                          \"value\": \"Match\",'+
		'                          \"code\": \"MA\"'+
		'                        },'+
		'                        \"ssnVerifiesToSurnameOnly\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"ssnVerifiesToAddress\": {'+
		'                          \"value\": \"Match\",'+
		'                          \"code\": \"MA\"'+
		'                        },'+
		'                        \"dlVerifiesToFullName\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"dlVerifiesToSurnameOnly\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        },'+
		'                        \"dlVerifiesToAddress\": {'+
		'                          \"value\": \"NO Match\",'+
		'                          \"code\": \"NM\"'+
		'                        }'+
		'                      },'+
		'                      \"dateOfBirthMatch\": {'+
		'                        \"value\": \"Day of Birth and Month of Birth exact match, Year of Birth exact match (no plus or minus one year logic accommodation)\",'+
		'                        \"code\": \"9\"'+
		'                      }'+
		'                    },'+
		'                    \"preciseMatch\": {'+
		'                      \"version\": \"02.00\",'+
		'                      \"responseStatusCode\": {'+
		'                        \"value\": \"Data found for search request\",'+
		'                        \"code\": \"00\"'+
		'                      },'+
		'                      \"preciseMatchTransactionID\": \"432c7640-a9f8-41a4-b\",'+
		'                      \"preciseMatchScore\": \"618\",'+
		'                      \"preciseMatchDecision\": {'+
		'                        \"value\": \"\",'+
		'                        \"code\": \" \"'+
		'                      },'+
		'                      \"addresses\": {'+
		'                        \"address\": ['+
		'                          {'+
		'                            \"summary\": {'+
		'                              \"verificationResult\": {'+
		'                                \"value\": \"Exact match on first and last name;Exact match on address\",'+
		'                                \"code\": \"A1\"'+
		'                              },'+
		'                              \"type\": {'+
		'                                \"value\": \"Single family dwelling\",'+
		'                                \"code\": \"S \"'+
		'                              },'+
		'                              \"unitMismatchResult\": {'+
		'                                \"value\": \"\",'+
		'                                \"code\": \"  \"'+
		'                              },'+
		'                              \"highRiskResult\": {'+
		'                                \"value\": \"No address high risk information found\",'+
		'                                \"code\": \"N \"'+
		'                              },'+
		'                              \"counts\": {'+
		'                                \"standardizedAddressReturnCount\": 1,'+
		'                                \"residentialAddressMatchCount\": 3,'+
		'                                \"residentialAddressReturnCount\": 2,'+
		'                                \"highRiskAddressReturnCount\": 0,'+
		'                                \"businessAddressMatchCount\": 0,'+
		'                                \"businessAddressReturnCount\": 0'+
		'                              }'+
		'                            },'+
		'                            \"detail\": {'+
		'                              \"standardizedAddressRcd\": {'+
		'                                \"surname\": \"PERSINGER\",'+
		'                                \"firstName\": \"VERONICA\",'+
		'                                \"address\": \"6647 WILDFLOWER DR S\",'+
		'                                \"city\": \"COTTAGE GROVE\",'+
		'                                \"state\": \"MN\",'+
		'                                \"zipCode\": \"55016\"'+
		'                              },'+
		'                              \"residentialAddressRcd\": ['+
		'                                {'+
		'                                  \"surname\": \"PERSINGER\",'+
		'                                  \"firstName\": \"VERONICA\",'+
		'                                  \"aliasName\": ['+
		'                                    '+
		'                                  ],'+
		'                                  \"address\": \"6647 WILDFLOWER DR S\",'+
		'                                  \"city\": \"COTTAGE GROVE\",'+
		'                                  \"state\": \"MN\",'+
		'                                  \"zipCode\": \"55016\",'+
		'                                  \"zipPlus4\": \"1727\",'+
		'                                  \"lastUpdatedDate\": \"20050512\"'+
		'                                },'+
		'                                {'+
		'                                  \"surname\": \"PERSINGER\",'+
		'                                  \"firstName\": \"VERONICA\",'+
		'                                  \"aliasName\": ['+
		'                                    '+
		'                                  ],'+
		'                                  \"address\": \"6647 WILDFLOWER DR S\",'+
		'                                  \"city\": \"COTTAGE GROVE\",'+
		'                                  \"state\": \"MN\",'+
		'                                  \"zipCode\": \"55016\",'+
		'                                  \"zipPlus4\": \"1727\",'+
		'                                  \"areaCode\": \"651\",'+
		'                                  \"phone\": \"4581155\",'+
		'                                  \"otherHouseholdMembers\": {'+
		'                                    \"name\": ['+
		'                                      \"GEORGE Q\",'+
		'                                      \"SHERRY N\",'+
		'                                      \"JAMES R\"'+
		'                                    ]'+
		'                                  },'+
		'                                  \"monthsAtResidence\": \"0024\",'+
		'                                  \"lastUpdatedDate\": \"19990917\"'+
		'                                }'+
		'                              ],'+
		'                              \"highRiskAddressRcd\": ['+
		'                                '+
		'                              ],'+
		'                              \"highRiskAddressDescription\": ['+
		'                                {'+
		'                                  \"highRiskDescription\": \"No high risk business at address/phone\"'+
		'                                }'+
		'                              ],'+
		'                              \"businessAddressRcd\": ['+
		'                                '+
		'                              ]'+
		'                            }'+
		'                          }'+
		'                        ]'+
		'                      },'+
		'                      \"phones\": {'+
		'                        \"phone\": ['+
		'                          {'+
		'                            \"summary\": {'+
		'                              \"verificationResult\": {'+
		'                                \"value\": \"Exact match to Phone, Exact Match to Name, Exact match to Address\",'+
		'                                \"code\": \"EA\"'+
		'                              },'+
		'                              \"classification\": {'+
		'                                \"value\": \"Phone matches Wireless Type Service including PCS\",'+
		'                                \"code\": \"C\"'+
		'                              },'+
		'                              \"highRiskResult\": {'+
		'                                \"value\": \"No phone high risk information found\",'+
		'                                \"code\": \"N\"'+
		'                              },'+
		'                              \"counts\": {'+
		'                                \"residentialPhoneMatchCount\": 1,'+
		'                                \"residentialPhoneReturnCount\": 1,'+
		'                                \"highRiskPhoneReturnCount\": 0,'+
		'                                \"businessPhoneMatchCount\": 0,'+
		'                                \"businessPhoneReturnCount\": 0'+
		'                              }'+
		'                            },'+
		'                            \"detail\": {'+
		'                              \"residentialPhoneRcd\": ['+
		'                                {'+
		'                                  \"surname\": \"PERSINGER JR\",'+
		'                                  \"firstName\": \"VERONICA\",'+
		'                                  \"aliasName\": ['+
		'                                    '+
		'                                  ],'+
		'                                  \"address\": \"6647 WILDFLOWER DR S\",'+
		'                                  \"city\": \"COTTAGE GROVE\",'+
		'                                  \"state\": \"MN\",'+
		'                                  \"zipCode\": \"55016\",'+
		'                                  \"zipPlus4\": \"1727\",'+
		'                                  \"areaCode\": \"310\",'+
		'                                  \"phone\": \"3512745\",'+
		'                                  \"otherHouseholdMembers\": {'+
		'                                    \"name\": ['+
		'                                      \"GEORGE\"'+
		'                                    ]'+
		'                                  },'+
		'                                  \"lastUpdatedDate\": \"20050512\"'+
		'                                }'+
		'                              ],'+
		'                              \"phoneHighRiskRcd\": ['+
		'                                '+
		'                              ],'+
		'                              \"highRiskPhoneDescription\": ['+
		'                                {'+
		'                                  \"highRiskDescription\": \"No high risk business at address/phone\"'+
		'                                }'+
		'                              ],'+
		'                              \"businessPhoneRcd\": ['+
		'                                '+
		'                              ]'+
		'                            }'+
		'                          }'+
		'                        ]'+
		'                      },'+
		'                      \"consumerID\": {'+
		'                        \"summary\": {'+
		'                          \"verificationResult\": {'+
		'                            \"value\": \"Match to full name and address-Match performed using SSN\",'+
		'                            \"code\": \"YA\"'+
		'                          },'+
		'                          \"deceasedResult\": {'+
		'                            \"value\": \"No\",'+
		'                            \"code\": \"N\"'+
		'                          },'+
		'                          \"formatResult\": {'+
		'                            \"value\": \"Valid\",'+
		'                            \"code\": \"V\"'+
		'                          },'+
		'                          \"issueResult\": {'+
		'                            \"value\": \"SSN issued\",'+
		'                            \"code\": \"I\"'+
		'                          },'+
		'                          \"issueState\": \"MI\",'+
		'                          \"issueStartRange\": \"1958\",'+
		'                          \"issueEndRange\": \"1961\",'+
		'                          \"counts\": {'+
		'                            \"consumerIDReturnCount\": 1'+
		'                          }'+
		'                        },'+
		'                        \"detail\": {'+
		'                          \"consumerIDRcd\": ['+
		'                            {'+
		'                              \"surname\": \"PERSINGER\",'+
		'                              \"firstName\": \"VERONICA\",'+
		'                              \"aliasName\": ['+
		'                                '+
		'                              ],'+
		'                              \"address\": \"6647 WILDFLOWER DR S\",'+
		'                              \"city\": \"COTTAGE GROVE\",'+
		'                              \"state\": \"MN\",'+
		'                              \"zipCode\": \"55016\",'+
		'                              \"zipPlus4\": \"1727\",'+
		'                              \"areaCode\": \"651\",'+
		'                              \"phone\": \"4581155\",'+
		'                              \"reportedDate\": \"20040318\",'+
		'                              \"lastUpdatedDate\": \"20050512\"'+
		'                            }'+
		'                          ]'+
		'                        }'+
		'                      },'+
		'                      \"dateOfBirth\": {'+
		'                        \"summary\": {'+
		'                          \"matchResult\": {'+
		'                            \"value\": \"Day of Birth and Month of Birth exact match, Year of Birth exact match (no plus or minus one year logic accommodation)\",'+
		'                            \"code\": \"9\"'+
		'                          },'+
		'                          \"monthOfBirth\": \"07\",'+
		'                          \"dayOfBirth\": \"09\",'+
		'                          \"yearOfBirth\": \"1942\"'+
		'                        }'+
		'                      },'+
		'                      \"driverLicense\": {'+
		'                        \"summary\": {'+
		'                          \"verificationResult\": {'+
		'                            \"value\": \"Data not available\",'+
		'                            \"code\": \"NA\"'+
		'                          },'+
		'                          \"formatValidation\": {'+
		'                            \"value\": \"Driver\'s license not provided or validated\",'+
		'                            \"code\": \" \"'+
		'                          }'+
		'                        }'+
		'                      },'+
		'                      \"changeOfAddresses\": {'+
		'                        \"changeOfAddress\": ['+
		'                          {'+
		'                            \"summary\": {'+
		'                              \"verificationResult\": {'+
		'                                \"value\": \"No change of address information found\",'+
		'                                \"code\": \"N \"'+
		'                              },'+
		'                              \"counts\": {'+
		'                                \"changeOfAddressReturnCount\": 0'+
		'                              }'+
		'                            }'+
		'                          }'+
		'                        ]'+
		'                      },'+
		'                      \"ofac\": {'+
		'                        \"summary\": {'+
		'                          \"verificationResult\": {'+
		'                            \"value\": \"No match\",'+
		'                            \"code\": \"1 \"'+
		'                          },'+
		'                          \"counts\": {'+
		'                            \"ofacReturnCount\": 0'+
		'                          }'+
		'                        }'+
		'                      },'+
		'                      \"previousAddresses\": {'+
		'                        \"previousAddress\": ['+
		'                          {'+
		'                            \"summary\": {'+
		'                              \"counts\": {'+
		'                                \"previousAddressReturnCount\": 2'+
		'                              }'+
		'                            },'+
		'                            \"detail\": {'+
		'                              \"previousAddressRcd\": ['+
		'                                {'+
		'                                  \"address\": \"GENERAL DELIVERY\",'+
		'                                  \"city\": \"COTTAGE GROVE\",'+
		'                                  \"state\": \"MN\",'+
		'                                  \"zipCode\": \"55016\",'+
		'                                  \"zipPlus4\": \"9999\",'+
		'                                  \"reportedDate\": \"20040715\",'+
		'                                  \"lastUpdatedDate\": \"20040715\"'+
		'                                },'+
		'                                {'+
		'                                  \"address\": \"7220 JORDON AVE S\",'+
		'                                  \"city\": \"COTTAGE GROVE\",'+
		'                                  \"state\": \"MN\",'+
		'                                  \"zipCode\": \"55016\",'+
		'                                  \"zipPlus4\": \"3655\",'+
		'                                  \"reportedDate\": \"19990523\",'+
		'                                  \"lastUpdatedDate\": \"20030224\"'+
		'                                }'+
		'                              ]'+
		'                            }'+
		'                          }'+
		'                        ]'+
		'                      },'+
		'                      \"ssnfinder\": {'+
		'                        \"summary\": {'+
		'                          \"counts\": {'+
		'                            \"ssnfinderReturnCount\": 0'+
		'                          }'+
		'                        }'+
		'                      }'+
		'                    },'+
		'                    \"kba\": {'+
		'                      \"general\": {'+
		'                        \"sessionID\": \"PBGK3A39U3DSPDZYTZ5AGUHF.pidd1v-200219104501809842610\",'+
		'                        \"numberOfQuestions\": 5,'+
		'                        \"kbaresultCode\": 0,'+
		'                        \"kbaresultCodeDescription\": \"KBA processing successful questions returned\"'+
		'                      },'+
		'                      \"questionSet\": ['+
		'                        {'+
		'                          \"questionType\": 12,'+
		'                          \"questionText\": \"I was born within a year or on the year of the date below.\",'+
		'                          \"questionSelect\": {'+
		'                            \"questionChoice\": ['+
		'                              \"1937\",'+
		'                              \"1940\",'+
		'                              \"1943\",'+
		'                              \"1946\",'+
		'                              \"NONE OF THE ABOVE/DOES NOT APPLY\"'+
		'                            ]'+
		'                          }'+
		'                        },'+
		'                        {'+
		'                          \"questionType\": 42,'+
		'                          \"questionText\": \"Using your date of birth, please select your astrological sun sign of the zodiac from the following choices.\",'+
		'                          \"questionSelect\": {'+
		'                            \"questionChoice\": ['+
		'                              \"TAURUS\",'+
		'                              \"CANCER\",'+
		'                              \"SCORPIO\",'+
		'                              \"CAPRICORN\",'+
		'                              \"NONE OF THE ABOVE/DOES NOT APPLY\"'+
		'                            ]'+
		'                          }'+
		'                        },'+
		'                        {'+
		'                          \"questionType\": 57,'+
		'                          \"questionText\": \"Using today\'s date to determine your current age, how old will you be in exactly 5 years?\",'+
		'                          \"questionSelect\": {'+
		'                            \"questionChoice\": ['+
		'                              \"87\",'+
		'                              \"89\",'+
		'                              \"91\",'+
		'                              \"93\",'+
		'                              \"NONE OF THE ABOVE/DOES NOT APPLY\"'+
		'                            ]'+
		'                          }'+
		'                        },'+
		'                        {'+
		'                          \"questionType\": 45,'+
		'                          \"questionText\": \"Which of the following represents the last four digits of your primary checking account number?\",'+
		'                          \"questionSelect\": {'+
		'                            \"questionChoice\": ['+
		'                              \"4978\",'+
		'                              \"4987\",'+
		'                              \"4996\",'+
		'                              \"5005\",'+
		'                              \"NONE OF THE ABOVE/DOES NOT APPLY\"'+
		'                            ]'+
		'                          }'+
		'                        },'+
		'                        {'+
		'                          \"questionType\": 35,'+
		'                          \"questionText\": \"You may have opened an auto loan or auto lease in or around July 2017. Please select the dollar amount range in which your monthly auto loan or lease payment falls. If you have not had an auto loan or lease with any of these amount ranges now or in the past, please select \'NONE OF THE ABOVE/DOES NOT APPLY\'.\",'+
		'                          \"questionSelect\": {'+
		'                            \"questionChoice\": ['+
		'                              \"$250 - $349\",'+
		'                              \"$350 - $449\",'+
		'                              \"$450 - $549\",'+
		'                              \"$550 - $649\",'+
		'                              \"NONE OF THE ABOVE/DOES NOT APPLY\"'+
		'                            ]'+
		'                          }'+
		'                        }'+
		'                      ],'+
		'                      \"creditQuestionSet\": ['+
		'                        '+
		'                      ],'+
		'                      \"nonCreditQuestionSet\": ['+
		'                        '+
		'                      ]'+
		'                    },'+
		'                    \"multiFactorAuth\": {'+
		'                      \"oneTimePwd\": \"581639\",'+
		'                      \"status\": {'+
		'                        \"value\": \"Message Sent\",'+
		'                        \"code\": \"100\"'+
		'                      },'+
		'                      \"mfaValidationResponse\": {'+
		'                        \"validateOTP\": {'+
		'                          \"otp\": \"581639\",'+
		'                          \"otpMatchResult\": \"M\"'+
		'                        }'+
		'                      }'+
		'                    },'+
		'                    \"pidxmlversion\": \"06.00\",'+
		'                    \"glbDetail\": {'+
		'                      \"fraudShield\": {'+
		'                        \"indicator\": ['+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"01\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"02\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"03\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"04\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"05\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"06\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"10\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"11\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"13\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"14\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"15\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"16\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"17\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"18\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"Y\",'+
		'                            \"code\": \"21\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"25\"'+
		'                          },'+
		'                          {'+
		'                            \"value\": \"N\",'+
		'                            \"code\": \"26\"'+
		'                          }'+
		'                        ]'+
		'                      }'+
		'                    },'+
		'                    \"kbascore\": {'+
		'                      \"general\": {'+
		'                        \"priorUsage\": {'+
		'                          \"exceededUseLimitCode\": \"Y\",'+
		'                          \"clientUseLimitPeriod\": 0,'+
		'                          \"clientUseLimitCount\": 0,'+
		'                          \"totalUseLimitPeriod\": 0,'+
		'                          \"totalUseLimitCount\": 0,'+
		'                          \"consumerSSNTotal\": 0,'+
		'                          \"clientSSNUseLimitPeriod\": 0,'+
		'                          \"clientSSNUseLimitCount\": 0,'+
		'                          \"totalSSNUseLimitPeriod\": 0,'+
		'                          \"totalSSNUseLimitCount\": 0,'+
		'                          \"concurrentPINTotal\": 0,'+
		'                          \"clientConcurrentPINLimitCount\": 0,'+
		'                          \"companyConcurrentPINLimitCount\": 0,'+
		'                          \"globalConcurrentPINLimitCount\": 0'+
		'                        },'+
		'                        \"kbaresultCode\": 7,'+
		'                        \"kbaresultCodeDescription\": \"No questions returned-Client List usage exceeded\"'+
		'                      },'+
		'                      \"scoreSummary\": {'+
		'                        \"acceptReferCode\": \"ACC\",'+
		'                        \"decisionOverrideIndicator\": \"N\",'+
		'                        \"preciseIDScore\": \"0\",'+
		'                        \"outWalletScore\": \"0\",'+
		'                        \"outWalletFormula\": \"(0/0)*100\",'+
		'                        \"progressiveQuestionAchieved\": \"N\",'+
		'                        \"championChallengerIndicator\": \"N\",'+
		'                        \"riskStrategyNum\": \"1\",'+
		'                        \"riskStrategyDescription\": \"Default Risk Strategy\",'+
		'                        \"questionConfigNum\": \"1\",'+
		'                        \"questionConfigDescription\": \"Default Question Configuration\",'+
		'                        \"decisionMatrixNum\": \"1\",'+
		'                        \"decisionMatrixDescription\": \"Default Decision Matrix\"'+
		'                      }'+
		'                    }'+
		'                  }'+
		'                }'+
		'              }'+
		'            }'+
		'          }'+
		'        },'+
		'        \"decisions\": ['+
		'          {'+
		'            \"element\": \"oneTimePasscode\",'+
		'            \"value\": \"581639\",'+
		'            \"reason\": \"\"'+
		'          },'+
		'          {'+
		'            \"element\": \"oneTimePasscodeStatus\",'+
		'            \"value\": \"100\",'+
		'            \"reason\": \"Message Sent\"'+
		'          },'+
		'          {'+
		'            \"element\": \"validateOneTimePasscode\",'+
		'            \"value\": \"581639\",'+
		'            \"reason\": \"\"'+
		'          },'+
		'          {'+
		'            \"element\": \"validateOneTimePasscodeMatchResult\",'+
		'            \"value\": \"M\",'+
		'            \"reason\": \"Match\"'+
		'          },'+
		'          {'+
		'            \"element\": \"initialDecision\",'+
		'            \"value\": \"ACC\",'+
		'            \"reason\": \"\"'+
		'          },'+
		'          {'+
		'            \"element\": \"finalDecision\",'+
		'            \"value\": \"ACC\",'+
		'            \"reason\": \"\"'+
		'          },'+
		'          {'+
		'            \"element\": \"kbaAcceptReferCode\",'+
		'            \"value\": \"ACC\",'+
		'            \"reason\": \"\"'+
		'          },'+
		'          {'+
		'            \"element\": \"kbaResultCode\",'+
		'            \"value\": \"0\",'+
		'            \"reason\": \"KBA processing successful questions returned\"'+
		'          }'+
		'        ],'+
		'        \"matches\": ['+
		'          {'+
		'            \"name\": \"pmAddressVerificationResult1\",'+
		'            \"value\": \"A1\"'+
		'          },'+
		'          {'+
		'            \"name\": \"pmPhoneVerificationResult1\",'+
		'            \"value\": \"EA\"'+
		'          },'+
		'          {'+
		'            \"name\": \"pmConsumerIDVerificationResult\",'+
		'            \"value\": \"YA\"'+
		'          },'+
		'          {'+
		'            \"name\": \"pmDateOfBirthMatchResult\",'+
		'            \"value\": \"9\"'+
		'          },'+
		'          {'+
		'            \"name\": \"pmDriverLicenseVerificationResult\",'+
		'            \"value\": \"NA\"'+
		'          },'+
		'          {'+
		'            \"name\": \"pmChangeOfAddressVerificationResult1\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"pmOFACVerificationResult\",'+
		'            \"value\": \"1\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator01\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator02\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator03\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator04\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator05\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator06\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator10\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator11\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator13\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator14\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator15\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator16\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator17\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator18\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator21\",'+
		'            \"value\": \"Y\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator25\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"glbFSIndicator26\",'+
		'            \"value\": \"N\"'+
		'          },'+
		'          {'+
		'            \"name\": \"fullNameVerifiesToAddress\",'+
		'            \"value\": \"MA\"'+
		'          },'+
		'          {'+
		'            \"name\": \"fullNameVerifiesToSSN\",'+
		'            \"value\": \"MA\"'+
		'          },'+
		'          {'+
		'            \"name\": \"fullNameVerifiesToDL\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"fullNameVerifiesToPhone\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"surnameOnlyVerifiesToAddress\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"surnameOnlyVerifiesToSSN\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"surnameOnlyVerifiesToDL\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"surnameOnlyVerifiesToPhone\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"addressVerifiesToFullName\",'+
		'            \"value\": \"MA\"'+
		'          },'+
		'          {'+
		'            \"name\": \"addressVerifiesToSurnameOnly\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"addressVerifiesToSSN\",'+
		'            \"value\": \"MA\"'+
		'          },'+
		'          {'+
		'            \"name\": \"addressVerifiesToDL\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"addressVerifiesToPhone\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"ssnVerifiesToFullName\",'+
		'            \"value\": \"MA\"'+
		'          },'+
		'          {'+
		'            \"name\": \"ssnVerifiesToSurnameOnly\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"ssnVerifiesToAddress\",'+
		'            \"value\": \"MA\"'+
		'          },'+
		'          {'+
		'            \"name\": \"dlVerifiesToFullName\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"dlVerifiesToSurnameOnly\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"dlVerifiesToAddress\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"phoneVerifiesToFullName\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"phoneVerifiesToSurnameOnly\",'+
		'            \"value\": \"NM\"'+
		'          },'+
		'          {'+
		'            \"name\": \"phoneVerifiesToAddress\",'+
		'            \"value\": \"NM\"'+
		'          }'+
		'        ],'+
		'        \"scores\": ['+
		'          {'+
		'            \"name\": \"preciseMatchScore\",'+
		'            \"score\": 618,'+
		'            \"type\": \"score\"'+
		'          },'+
		'          {'+
		'            \"name\": \"kbaScore\",'+
		'            \"score\": 0,'+
		'            \"type\": \"score\"'+
		'          }'+
		'        ]'+
		'      }'+
		'    ]'+
		'  },'+
		'  \"originalRequestData\": {'+
		'    \"application\": {'+
		'      \"oneTimePasscode\": \"581639\",'+
		'      \"productDetails\": {'+
		'        \"productType\": \"WRITTEN_INSTRUCTIONS\"'+
		'      }'+
		'    },'+
		'    \"contacts\": ['+
		'      {'+
		'        \"addresses\": ['+
		'          {'+
		'            \"addressType\": \"CURRENT\",'+
		'            \"id\": \"Main_Contact_Address_0\",'+
		'            \"poBoxNumber\": \"\",'+
		'            \"postTown\": \"LAWRENCE\",'+
		'            \"postal\": \"66049\",'+
		'            \"stateProvinceCode\": \"KS\",'+
		'            \"street\": \"2209 KINGSTON DR\",'+
		'            \"street2\": \"\"'+
		'          }'+
		'        ],'+
		'        \"emails\": ['+
		'          {'+
		'            \"email\": \"John.Smith@Experian.com\",'+
		'            \"id\": \"MAIN_EMAIL_0\",'+
		'            \"type\": \"\"'+
		'          }'+
		'        ],'+
		'        \"id\": \"APPLICANT_CONTACT_ID_1\",'+
		'        \"identityDocuments\": ['+
		'          {'+
		'            \"documentNumber\": \"666204234\",'+
		'            \"documentType\": \"SSN\",'+
		'            \"hashedDocumentNumber\": \"\"'+
		'          },'+
		'          {'+
		'            \"documentNumber\": \"\",'+
		'            \"documentType\": \"DRIVER_LICENSE\",'+
		'            \"hashedDocumentNumber\": \"\"'+
		'          }'+
		'        ],'+
		'        \"person\": {'+
		'          \"names\": ['+
		'            {'+
		'              \"firstName\": \"TIMOTHY\",'+
		'              \"id\": \"\",'+
		'              \"middleNames\": \"A\",'+
		'              \"nameSuffix\": \"\",'+
		'              \"surName\": \"APPLEGATE\"'+
		'            }'+
		'          ],'+
		'          \"personDetails\": {'+
		'            \"age\": \"\",'+
		'            \"dateOfBirth\": \"\",'+
		'            \"gender\": \"\",'+
		'            \"mothersMaidenName\": \"\",'+
		'            \"noOfDependents\": \"\",'+
		'            \"occupancyStatus\": \"\",'+
		'            \"spouseName\": \"\",'+
		'            \"yearOfBirth\": \"\"'+
		'          },'+
		'          \"personIdentifier\": \"\",'+
		'          \"typeOfPerson\": \"\"'+
		'        },'+
		'        \"telephones\": ['+
		'          {'+
		'            \"id\": \"Main_Phone_0\",'+
		'            \"number\": \"\"'+
		'          }'+
		'        ]'+
		'      }'+
		'    ],'+
		'    \"control\": ['+
		'      {'+
		'        \"option\": \"PIDXML_VERSION\",'+
		'        \"value\": \"06.00\"'+
		'      },'+
		'      {'+
		'        \"option\": \"SUBSCRIBER_PREAMBLE\",'+
		'        \"value\": \"TBD1\"'+
		'      },'+
		'      {'+
		'        \"option\": \"SUBSCRIBER_OPERATOR_INITIAL\",'+
		'        \"value\": \"OD\"'+
		'      },'+
		'      {'+
		'        \"option\": \"SUBSCRIBER_SUB_CODE\",'+
		'        \"value\": \"1234567\"'+
		'      },'+
		'      {'+
		'        \"option\": \"PID_USERNAME\",'+
		'        \"value\": \"username\"'+
		'      },'+
		'      {'+
		'        \"option\": \"PID_PASSWORD\",'+
		'        \"value\": \"***YOUR ENCODED PASSWORD***\"'+
		'      },'+
		'      {'+
		'        \"option\": \"VERBOSE\",'+
		'        \"value\": \"Y\"'+
		'      },'+
		'      {'+
		'        \"option\": \"PRODUCT_OPTION\",'+
		'        \"value\": \"22\"'+
		'      },'+
		'      {'+
		'        \"option\": \"SESSIONID\",'+
		'        \"value\": \"9C5EJU68OX4HMIJVOTB5ZFST.pidd2v-190417104301297044784\"'+
		'      },'+
		'      {'+
		'        \"option\": \"VALIDATE_OTP\",'+
		'        \"value\": \"Y\"'+
		'      },'+
		'      {'+
		'        \"option\": \"DETAIL_REQUEST\",'+
		'        \"value\": \"D\"'+
		'      },'+
		'      {'+
		'        \"option\": \"FREEZE_KEY_PIN\",'+
		'        \"value\": \"\"'+
		'      }'+
		'    ],'+
		'    \"kba\": {'+
		'      \"answers\": {'+
		'        \"outWalletAnswer1\": \"3\",'+
		'        \"outWalletAnswer2\": \"4\",'+
		'        \"outWalletAnswer3\": \"5\",'+
		'        \"outWalletAnswer4\": \"5\",'+
		'        \"outWalletAnswer5\": \"5\"'+
		'      },'+
		'      \"championChallengerRandomNumber\": \"\",'+
		'      \"languageCode\": \"\",'+
		'      \"outWalletQuestionsRequest\": \"5\",'+
		'      \"riskStrategyNumber\": \"\",'+
		'      \"sessionId\": \"PBGK3A39U3DSPDZYTZ5AGUHF.pidd1v-200219104501809842610\"'+
		'    }'+
		'  }'+
		'}';
		AGN_DSRM_Experian_Response r = AGN_DSRM_Experian_Response.parse(json);
		System.assert(r != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.OtherHouseholdMembers objOtherHouseholdMembers = new AGN_DSRM_Experian_Response.OtherHouseholdMembers(System.JSON.createParser(json));
		System.assert(objOtherHouseholdMembers != null);
		System.assert(objOtherHouseholdMembers.name == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Products objProducts = new AGN_DSRM_Experian_Response.Products(System.JSON.createParser(json));
		System.assert(objProducts != null);
		System.assert(objProducts.preciseIDServer == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response objAGN_DSRM_Experian_Response = new AGN_DSRM_Experian_Response(System.JSON.createParser(json));
		System.assert(objAGN_DSRM_Experian_Response != null);
		System.assert(objAGN_DSRM_Experian_Response.responseHeader == null);
		System.assert(objAGN_DSRM_Experian_Response.clientResponsePayload == null);
		System.assert(objAGN_DSRM_Experian_Response.originalRequestData == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Address objAddress = new AGN_DSRM_Experian_Response.Address(System.JSON.createParser(json));
		System.assert(objAddress != null);
		System.assert(objAddress.summary == null);
		System.assert(objAddress.detail == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.FraudSolutions objFraudSolutions = new AGN_DSRM_Experian_Response.FraudSolutions(System.JSON.createParser(json));
		System.assert(objFraudSolutions != null);
		System.assert(objFraudSolutions.response == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Addresses_Z objAddresses_Z = new AGN_DSRM_Experian_Response.Addresses_Z(System.JSON.createParser(json));
		System.assert(objAddresses_Z != null);
		System.assert(objAddresses_Z.addressType == null);
		System.assert(objAddresses_Z.id == null);
		//System.assert(objAddresses_Z.poBoxNumber == null); //SB- Validation error
		System.assert(objAddresses_Z.postTown == null);
		System.assert(objAddresses_Z.postal == null);
		System.assert(objAddresses_Z.stateProvinceCode == null);
		System.assert(objAddresses_Z.street == null);
		//System.assert(objAddresses_Z.street2 == null); //SB- Validation error

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.ChangeOfAddress objChangeOfAddress = new AGN_DSRM_Experian_Response.ChangeOfAddress(System.JSON.createParser(json));
		System.assert(objChangeOfAddress != null);
		System.assert(objChangeOfAddress.summary == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Scores objScores = new AGN_DSRM_Experian_Response.Scores(System.JSON.createParser(json));
		System.assert(objScores != null);
		System.assert(objScores.name == null);
		System.assert(objScores.score == null);
		System.assert(objScores.type_Z == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.QuestionSelect objQuestionSelect = new AGN_DSRM_Experian_Response.QuestionSelect(System.JSON.createParser(json));
		System.assert(objQuestionSelect != null);
		System.assert(objQuestionSelect.questionChoice == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Addresses objAddresses = new AGN_DSRM_Experian_Response.Addresses(System.JSON.createParser(json));
		System.assert(objAddresses != null);
		System.assert(objAddresses.address == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Counts_Y objCounts_Y = new AGN_DSRM_Experian_Response.Counts_Y(System.JSON.createParser(json));
		System.assert(objCounts_Y != null);
		System.assert(objCounts_Y.consumerIDReturnCount == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.PriorUsage objPriorUsage = new AGN_DSRM_Experian_Response.PriorUsage(System.JSON.createParser(json));
		System.assert(objPriorUsage != null);
		System.assert(objPriorUsage.exceededUseLimitCode == null);
		System.assert(objPriorUsage.clientUseLimitPeriod == null);
		System.assert(objPriorUsage.clientUseLimitCount == null);
		System.assert(objPriorUsage.totalUseLimitPeriod == null);
		System.assert(objPriorUsage.totalUseLimitCount == null);
		System.assert(objPriorUsage.consumerSSNTotal == null);
		System.assert(objPriorUsage.clientSSNUseLimitPeriod == null);
		System.assert(objPriorUsage.clientSSNUseLimitCount == null);
		System.assert(objPriorUsage.totalSSNUseLimitPeriod == null);
		System.assert(objPriorUsage.totalSSNUseLimitCount == null);
		System.assert(objPriorUsage.concurrentPINTotal == null);
		System.assert(objPriorUsage.clientConcurrentPINLimitCount == null);
		System.assert(objPriorUsage.companyConcurrentPINLimitCount == null);
		System.assert(objPriorUsage.globalConcurrentPINLimitCount == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.OriginalRequestData objOriginalRequestData = new AGN_DSRM_Experian_Response.OriginalRequestData(System.JSON.createParser(json));
		System.assert(objOriginalRequestData != null);
		System.assert(objOriginalRequestData.application == null);
		System.assert(objOriginalRequestData.contacts == null);
		System.assert(objOriginalRequestData.control == null);
		System.assert(objOriginalRequestData.kba == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Counts_Z objCounts_Z = new AGN_DSRM_Experian_Response.Counts_Z(System.JSON.createParser(json));
		System.assert(objCounts_Z != null);
		System.assert(objCounts_Z.residentialPhoneMatchCount == null);
		System.assert(objCounts_Z.residentialPhoneReturnCount == null);
		System.assert(objCounts_Z.highRiskPhoneReturnCount == null);
		System.assert(objCounts_Z.businessPhoneMatchCount == null);
		System.assert(objCounts_Z.businessPhoneReturnCount == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.PreviousAddress objPreviousAddress = new AGN_DSRM_Experian_Response.PreviousAddress(System.JSON.createParser(json));
		System.assert(objPreviousAddress != null);
		System.assert(objPreviousAddress.summary == null);
		System.assert(objPreviousAddress.detail == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Counts_W objCounts_W = new AGN_DSRM_Experian_Response.Counts_W(System.JSON.createParser(json));
		System.assert(objCounts_W != null);
		System.assert(objCounts_W.ofacReturnCount == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.PreciseMatch objPreciseMatch = new AGN_DSRM_Experian_Response.PreciseMatch(System.JSON.createParser(json));
		System.assert(objPreciseMatch != null);
		System.assert(objPreciseMatch.version == null);
		System.assert(objPreciseMatch.responseStatusCode == null);
		System.assert(objPreciseMatch.preciseMatchTransactionID == null);
		System.assert(objPreciseMatch.preciseMatchScore == null);
		System.assert(objPreciseMatch.preciseMatchDecision == null);
		System.assert(objPreciseMatch.addresses == null);
		System.assert(objPreciseMatch.phones == null);
		System.assert(objPreciseMatch.consumerID == null);
		System.assert(objPreciseMatch.dateOfBirth == null);
		System.assert(objPreciseMatch.driverLicense == null);
		System.assert(objPreciseMatch.changeOfAddresses == null);
		System.assert(objPreciseMatch.ofac == null);
		System.assert(objPreciseMatch.previousAddresses == null);
		System.assert(objPreciseMatch.ssnfinder == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Detail_Z objDetail_Z = new AGN_DSRM_Experian_Response.Detail_Z(System.JSON.createParser(json));
		System.assert(objDetail_Z != null);
		System.assert(objDetail_Z.residentialPhoneRcd == null);
		System.assert(objDetail_Z.phoneHighRiskRcd == null);
		System.assert(objDetail_Z.highRiskPhoneDescription == null);
		System.assert(objDetail_Z.businessPhoneRcd == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Counts_X objCounts_X = new AGN_DSRM_Experian_Response.Counts_X(System.JSON.createParser(json));
		System.assert(objCounts_X != null);
		System.assert(objCounts_X.changeOfAddressReturnCount == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Phones objPhones = new AGN_DSRM_Experian_Response.Phones(System.JSON.createParser(json));
		System.assert(objPhones != null);
		System.assert(objPhones.phone == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Detail_Y objDetail_Y = new AGN_DSRM_Experian_Response.Detail_Y(System.JSON.createParser(json));
		System.assert(objDetail_Y != null);
		System.assert(objDetail_Y.consumerIDRcd == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Counts_U objCounts_U = new AGN_DSRM_Experian_Response.Counts_U(System.JSON.createParser(json));
		System.assert(objCounts_U != null);
		System.assert(objCounts_U.ssnfinderReturnCount == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.DecisionElements objDecisionElements = new AGN_DSRM_Experian_Response.DecisionElements(System.JSON.createParser(json));
		System.assert(objDecisionElements != null);
		System.assert(objDecisionElements.serviceName == null);
		System.assert(objDecisionElements.applicantId == null);
		System.assert(objDecisionElements.decision == null);
		System.assert(objDecisionElements.decisionText == null);
		System.assert(objDecisionElements.appReference == null);
		System.assert(objDecisionElements.otherData == null);
		System.assert(objDecisionElements.decisions == null);
		System.assert(objDecisionElements.matches == null);
		System.assert(objDecisionElements.scores == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Counts_V objCounts_V = new AGN_DSRM_Experian_Response.Counts_V(System.JSON.createParser(json));
		System.assert(objCounts_V != null);
		System.assert(objCounts_V.previousAddressReturnCount == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Detail_X objDetail_X = new AGN_DSRM_Experian_Response.Detail_X(System.JSON.createParser(json));
		System.assert(objDetail_X != null);
		System.assert(objDetail_X.previousAddressRcd == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.MfaValidationResponse objMfaValidationResponse = new AGN_DSRM_Experian_Response.MfaValidationResponse(System.JSON.createParser(json));
		System.assert(objMfaValidationResponse != null);
		System.assert(objMfaValidationResponse.validateOTP == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		// AGN_DSRM_Experian_Response.Emails objEmails = new AGN_DSRM_Experian_Response.Emails(System.JSON.createParser(json)); //SB - Validation Error
		// System.assert(objEmails != null);
		// System.assert(objEmails.email == null);
		// System.assert(objEmails.id == null);
		// System.assert(objEmails.type_Z == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.QuestionSet objQuestionSet = new AGN_DSRM_Experian_Response.QuestionSet(System.JSON.createParser(json));
		System.assert(objQuestionSet != null);
		System.assert(objQuestionSet.questionType == null);
		System.assert(objQuestionSet.questionText == null);
		System.assert(objQuestionSet.questionSelect == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.DateOfBirth objDateOfBirth = new AGN_DSRM_Experian_Response.DateOfBirth(System.JSON.createParser(json));
		System.assert(objDateOfBirth != null);
		System.assert(objDateOfBirth.summary == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.ResponseHeader objResponseHeader = new AGN_DSRM_Experian_Response.ResponseHeader(System.JSON.createParser(json));
		System.assert(objResponseHeader != null);
		System.assert(objResponseHeader.requestType == null);
		System.assert(objResponseHeader.clientReferenceId == null);
		System.assert(objResponseHeader.expRequestId == null);
		System.assert(objResponseHeader.messageTime == null);
		System.assert(objResponseHeader.overallResponse == null);
		System.assert(objResponseHeader.responseCode == null);
		System.assert(objResponseHeader.responseType == null);
		System.assert(objResponseHeader.responseMessage == null);
		System.assert(objResponseHeader.tenantID == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.DriverLicense objDriverLicense = new AGN_DSRM_Experian_Response.DriverLicense(System.JSON.createParser(json));
		System.assert(objDriverLicense != null);
		System.assert(objDriverLicense.summary == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.CrossReferenceIndicatorsGrid objCrossReferenceIndicatorsGrid = new AGN_DSRM_Experian_Response.CrossReferenceIndicatorsGrid(System.JSON.createParser(json));
		System.assert(objCrossReferenceIndicatorsGrid != null);
		System.assert(objCrossReferenceIndicatorsGrid.fullNameVerifiesToAddress == null);
		System.assert(objCrossReferenceIndicatorsGrid.fullNameVerifiesToSSN == null);
		System.assert(objCrossReferenceIndicatorsGrid.fullNameVerifiesToDL == null);
		System.assert(objCrossReferenceIndicatorsGrid.fullNameVerifiesToPhone == null);
		System.assert(objCrossReferenceIndicatorsGrid.surnameOnlyVerifiesToAddress == null);
		System.assert(objCrossReferenceIndicatorsGrid.surnameOnlyVerifiesToSSN == null);
		System.assert(objCrossReferenceIndicatorsGrid.surnameOnlyVerifiesToDL == null);
		System.assert(objCrossReferenceIndicatorsGrid.surnameOnlyVerifiesToPhone == null);
		System.assert(objCrossReferenceIndicatorsGrid.addressVerifiesToFullName == null);
		System.assert(objCrossReferenceIndicatorsGrid.addressVerifiesToSurnameOnly == null);
		System.assert(objCrossReferenceIndicatorsGrid.addressVerifiesToSSN == null);
		System.assert(objCrossReferenceIndicatorsGrid.addressVerifiesToDL == null);
		System.assert(objCrossReferenceIndicatorsGrid.addressVerifiesToPhone == null);
		System.assert(objCrossReferenceIndicatorsGrid.phoneVerifiesToFullName == null);
		System.assert(objCrossReferenceIndicatorsGrid.phoneVerifiesToSurnameOnly == null);
		System.assert(objCrossReferenceIndicatorsGrid.phoneVerifiesToAddress == null);
		System.assert(objCrossReferenceIndicatorsGrid.ssnVerifiesToFullName == null);
		System.assert(objCrossReferenceIndicatorsGrid.ssnVerifiesToSurnameOnly == null);
		System.assert(objCrossReferenceIndicatorsGrid.ssnVerifiesToAddress == null);
		System.assert(objCrossReferenceIndicatorsGrid.dlVerifiesToFullName == null);
		System.assert(objCrossReferenceIndicatorsGrid.dlVerifiesToSurnameOnly == null);
		System.assert(objCrossReferenceIndicatorsGrid.dlVerifiesToAddress == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Json objJson = new AGN_DSRM_Experian_Response.Json(System.JSON.createParser(json));
		System.assert(objJson != null);
		System.assert(objJson.fraudSolutions == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Kbascore objKbascore = new AGN_DSRM_Experian_Response.Kbascore(System.JSON.createParser(json));
		System.assert(objKbascore != null);
		System.assert(objKbascore.general == null);
		System.assert(objKbascore.scoreSummary == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.RecommendedNextActions objRecommendedNextActions = new AGN_DSRM_Experian_Response.RecommendedNextActions(System.JSON.createParser(json));
		System.assert(objRecommendedNextActions != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.General_Z objGeneral_Z = new AGN_DSRM_Experian_Response.General_Z(System.JSON.createParser(json));
		System.assert(objGeneral_Z != null);
		System.assert(objGeneral_Z.priorUsage == null);
		System.assert(objGeneral_Z.kbaresultCode == null);
		System.assert(objGeneral_Z.kbaresultCodeDescription == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.PreciseIDServer objPreciseIDServer = new AGN_DSRM_Experian_Response.PreciseIDServer(System.JSON.createParser(json));
		System.assert(objPreciseIDServer != null);
		System.assert(objPreciseIDServer.sessionID == null);
		System.assert(objPreciseIDServer.header == null);
		System.assert(objPreciseIDServer.summary == null);
		System.assert(objPreciseIDServer.preciseMatch == null);
		System.assert(objPreciseIDServer.kba == null);
		System.assert(objPreciseIDServer.multiFactorAuth == null);
		System.assert(objPreciseIDServer.pidxmlversion == null);
		System.assert(objPreciseIDServer.glbDetail == null);
		System.assert(objPreciseIDServer.kbascore == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Header objHeader = new AGN_DSRM_Experian_Response.Header(System.JSON.createParser(json));
		System.assert(objHeader != null);
		System.assert(objHeader.reportDate == null);
		System.assert(objHeader.reportTime == null);
		System.assert(objHeader.productOption == null);
		System.assert(objHeader.subcode == null);
		System.assert(objHeader.referenceNumber == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.General objGeneral = new AGN_DSRM_Experian_Response.General(System.JSON.createParser(json));
		System.assert(objGeneral != null);
		System.assert(objGeneral.sessionID == null);
		System.assert(objGeneral.numberOfQuestions == null);
		System.assert(objGeneral.kbaresultCode == null);
		System.assert(objGeneral.kbaresultCodeDescription == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.MultiFactorAuth objMultiFactorAuth = new AGN_DSRM_Experian_Response.MultiFactorAuth(System.JSON.createParser(json));
		System.assert(objMultiFactorAuth != null);
		System.assert(objMultiFactorAuth.oneTimePwd == null);
		System.assert(objMultiFactorAuth.status == null);
		System.assert(objMultiFactorAuth.mfaValidationResponse == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Application objApplication = new AGN_DSRM_Experian_Response.Application(System.JSON.createParser(json));
		System.assert(objApplication != null);
		System.assert(objApplication.oneTimePasscode == null);
		System.assert(objApplication.productDetails == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Person objPerson = new AGN_DSRM_Experian_Response.Person(System.JSON.createParser(json));
		System.assert(objPerson != null);
		System.assert(objPerson.names == null);
		//System.assert(objPerson.personDetails == null); //SB - Validation Erron
		//System.assert(objPerson.personIdentifier == null); //SB - Validation Erron
		//System.assert(objPerson.typeOfPerson == null); //SB - Validation Erron

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Detail objDetail = new AGN_DSRM_Experian_Response.Detail(System.JSON.createParser(json));
		System.assert(objDetail != null);
		System.assert(objDetail.standardizedAddressRcd == null);
		System.assert(objDetail.residentialAddressRcd == null);
		System.assert(objDetail.highRiskAddressRcd == null);
		System.assert(objDetail.highRiskAddressDescription == null);
		System.assert(objDetail.businessAddressRcd == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.StandardizedAddressRcd objStandardizedAddressRcd = new AGN_DSRM_Experian_Response.StandardizedAddressRcd(System.JSON.createParser(json));
		System.assert(objStandardizedAddressRcd != null);
		System.assert(objStandardizedAddressRcd.surname == null);
		System.assert(objStandardizedAddressRcd.firstName == null);
		System.assert(objStandardizedAddressRcd.address == null);
		System.assert(objStandardizedAddressRcd.city == null);
		System.assert(objStandardizedAddressRcd.state == null);
		System.assert(objStandardizedAddressRcd.zipCode == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Counts objCounts = new AGN_DSRM_Experian_Response.Counts(System.JSON.createParser(json));
		System.assert(objCounts != null);
		System.assert(objCounts.standardizedAddressReturnCount == null);
		System.assert(objCounts.residentialAddressMatchCount == null);
		System.assert(objCounts.residentialAddressReturnCount == null);
		System.assert(objCounts.highRiskAddressReturnCount == null);
		System.assert(objCounts.businessAddressMatchCount == null);
		System.assert(objCounts.businessAddressReturnCount == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Matches objMatches = new AGN_DSRM_Experian_Response.Matches(System.JSON.createParser(json));
		System.assert(objMatches != null);
		System.assert(objMatches.name == null);
		System.assert(objMatches.value == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.GlbDetail objGlbDetail = new AGN_DSRM_Experian_Response.GlbDetail(System.JSON.createParser(json));
		System.assert(objGlbDetail != null);
		System.assert(objGlbDetail.fraudShield == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.ChangeOfAddresses objChangeOfAddresses = new AGN_DSRM_Experian_Response.ChangeOfAddresses(System.JSON.createParser(json));
		System.assert(objChangeOfAddresses != null);
		System.assert(objChangeOfAddresses.changeOfAddress == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Decisions objDecisions = new AGN_DSRM_Experian_Response.Decisions(System.JSON.createParser(json));
		System.assert(objDecisions != null);
		System.assert(objDecisions.element == null);
		System.assert(objDecisions.value == null);
		System.assert(objDecisions.reason == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Kba objKba = new AGN_DSRM_Experian_Response.Kba(System.JSON.createParser(json));
		System.assert(objKba != null);
		System.assert(objKba.general == null);
		System.assert(objKba.questionSet == null);
		System.assert(objKba.creditQuestionSet == null);
		System.assert(objKba.nonCreditQuestionSet == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Summary_Z objSummary_Z = new AGN_DSRM_Experian_Response.Summary_Z(System.JSON.createParser(json));
		System.assert(objSummary_Z != null);
		System.assert(objSummary_Z.verificationResult == null);
		System.assert(objSummary_Z.type_Z == null);
		System.assert(objSummary_Z.unitMismatchResult == null);
		System.assert(objSummary_Z.highRiskResult == null);
		System.assert(objSummary_Z.counts == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Summary_Y objSummary_Y = new AGN_DSRM_Experian_Response.Summary_Y(System.JSON.createParser(json));
		System.assert(objSummary_Y != null);
		System.assert(objSummary_Y.verificationResult == null);
		System.assert(objSummary_Y.classification == null);
		System.assert(objSummary_Y.highRiskResult == null);
		System.assert(objSummary_Y.counts == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Names objNames = new AGN_DSRM_Experian_Response.Names(System.JSON.createParser(json));
		System.assert(objNames != null);
		System.assert(objNames.firstName == null);
		System.assert(objNames.id == null);
		//System.assert(objNames.middleNames == null); //SB - Validation Error
		//System.assert(objNames.nameSuffix == null); //SB - Validation Error
		System.assert(objNames.surName == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.PersonDetails objPersonDetails = new AGN_DSRM_Experian_Response.PersonDetails(System.JSON.createParser(json));
		System.assert(objPersonDetails != null);
		System.assert(objPersonDetails.age == null);
		System.assert(objPersonDetails.dateOfBirth == null);
		System.assert(objPersonDetails.gender == null);
		System.assert(objPersonDetails.mothersMaidenName == null);
		System.assert(objPersonDetails.noOfDependents == null);
		System.assert(objPersonDetails.occupancyStatus == null);
		System.assert(objPersonDetails.spouseName == null);
		System.assert(objPersonDetails.yearOfBirth == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Control objControl = new AGN_DSRM_Experian_Response.Control(System.JSON.createParser(json));
		System.assert(objControl != null);
		System.assert(objControl.option == null);
		System.assert(objControl.value == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.OtherData objOtherData = new AGN_DSRM_Experian_Response.OtherData(System.JSON.createParser(json));
		System.assert(objOtherData != null);
		System.assert(objOtherData.json == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Phone objPhone = new AGN_DSRM_Experian_Response.Phone(System.JSON.createParser(json));
		System.assert(objPhone != null);
		System.assert(objPhone.summary == null);
		System.assert(objPhone.detail == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.ProductDetails objProductDetails = new AGN_DSRM_Experian_Response.ProductDetails(System.JSON.createParser(json));
		System.assert(objProductDetails != null);
		System.assert(objProductDetails.productType == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.ConsumerID objConsumerID = new AGN_DSRM_Experian_Response.ConsumerID(System.JSON.createParser(json));
		System.assert(objConsumerID != null);
		System.assert(objConsumerID.summary == null);
		System.assert(objConsumerID.detail == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.ResidentialPhoneRcd objResidentialPhoneRcd = new AGN_DSRM_Experian_Response.ResidentialPhoneRcd(System.JSON.createParser(json));
		System.assert(objResidentialPhoneRcd != null);
		System.assert(objResidentialPhoneRcd.surname == null);
		System.assert(objResidentialPhoneRcd.firstName == null);
		System.assert(objResidentialPhoneRcd.aliasName == null);
		System.assert(objResidentialPhoneRcd.address == null);
		System.assert(objResidentialPhoneRcd.city == null);
		System.assert(objResidentialPhoneRcd.state == null);
		System.assert(objResidentialPhoneRcd.zipCode == null);
		System.assert(objResidentialPhoneRcd.zipPlus4 == null);
		System.assert(objResidentialPhoneRcd.areaCode == null);
		System.assert(objResidentialPhoneRcd.phone == null);
		System.assert(objResidentialPhoneRcd.otherHouseholdMembers == null);
		System.assert(objResidentialPhoneRcd.lastUpdatedDate == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Ssnfinder objSsnfinder = new AGN_DSRM_Experian_Response.Ssnfinder(System.JSON.createParser(json));
		System.assert(objSsnfinder != null);
		System.assert(objSsnfinder.summary == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.FraudShield objFraudShield = new AGN_DSRM_Experian_Response.FraudShield(System.JSON.createParser(json));
		System.assert(objFraudShield != null);
		System.assert(objFraudShield.indicator == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.OverallResponse objOverallResponse = new AGN_DSRM_Experian_Response.OverallResponse(System.JSON.createParser(json));
		System.assert(objOverallResponse != null);
		System.assert(objOverallResponse.decision == null);
		System.assert(objOverallResponse.decisionText == null);
		System.assert(objOverallResponse.decisionReasons == null);
		System.assert(objOverallResponse.recommendedNextActions == null);
		System.assert(objOverallResponse.spareObjects == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.ConsumerIDRcd objConsumerIDRcd = new AGN_DSRM_Experian_Response.ConsumerIDRcd(System.JSON.createParser(json));
		System.assert(objConsumerIDRcd != null);
		System.assert(objConsumerIDRcd.surname == null);
		System.assert(objConsumerIDRcd.firstName == null);
		System.assert(objConsumerIDRcd.aliasName == null);
		System.assert(objConsumerIDRcd.address == null);
		System.assert(objConsumerIDRcd.city == null);
		System.assert(objConsumerIDRcd.state == null);
		System.assert(objConsumerIDRcd.zipCode == null);
		System.assert(objConsumerIDRcd.zipPlus4 == null);
		System.assert(objConsumerIDRcd.areaCode == null);
		System.assert(objConsumerIDRcd.phone == null);
		System.assert(objConsumerIDRcd.reportedDate == null);
		System.assert(objConsumerIDRcd.lastUpdatedDate == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.OrchestrationDecisions objOrchestrationDecisions = new AGN_DSRM_Experian_Response.OrchestrationDecisions(System.JSON.createParser(json));
		System.assert(objOrchestrationDecisions != null);
		System.assert(objOrchestrationDecisions.sequenceId == null);
		System.assert(objOrchestrationDecisions.decisionSource == null);
		System.assert(objOrchestrationDecisions.decision == null);
		System.assert(objOrchestrationDecisions.decisionReasons == null);
		System.assert(objOrchestrationDecisions.score == null);
		System.assert(objOrchestrationDecisions.decisionText == null);
		System.assert(objOrchestrationDecisions.nextAction == null);
		System.assert(objOrchestrationDecisions.appReference == null);
		System.assert(objOrchestrationDecisions.decisionTime == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Answers objAnswers = new AGN_DSRM_Experian_Response.Answers(System.JSON.createParser(json));
		System.assert(objAnswers != null);
		System.assert(objAnswers.outWalletAnswer1 == null);
		System.assert(objAnswers.outWalletAnswer2 == null);
		System.assert(objAnswers.outWalletAnswer3 == null);
		System.assert(objAnswers.outWalletAnswer4 == null);
		System.assert(objAnswers.outWalletAnswer5 == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.ScoreSummary objScoreSummary = new AGN_DSRM_Experian_Response.ScoreSummary(System.JSON.createParser(json));
		System.assert(objScoreSummary != null);
		System.assert(objScoreSummary.acceptReferCode == null);
		System.assert(objScoreSummary.decisionOverrideIndicator == null);
		System.assert(objScoreSummary.preciseIDScore == null);
		System.assert(objScoreSummary.outWalletScore == null);
		System.assert(objScoreSummary.outWalletFormula == null);
		System.assert(objScoreSummary.progressiveQuestionAchieved == null);
		System.assert(objScoreSummary.championChallengerIndicator == null);
		System.assert(objScoreSummary.riskStrategyNum == null);
		System.assert(objScoreSummary.riskStrategyDescription == null);
		System.assert(objScoreSummary.questionConfigNum == null);
		System.assert(objScoreSummary.questionConfigDescription == null);
		System.assert(objScoreSummary.decisionMatrixNum == null);
		System.assert(objScoreSummary.decisionMatrixDescription == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.HighRiskAddressDescription objHighRiskAddressDescription = new AGN_DSRM_Experian_Response.HighRiskAddressDescription(System.JSON.createParser(json));
		System.assert(objHighRiskAddressDescription != null);
		System.assert(objHighRiskAddressDescription.highRiskDescription == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.PreviousAddressRcd objPreviousAddressRcd = new AGN_DSRM_Experian_Response.PreviousAddressRcd(System.JSON.createParser(json));
		System.assert(objPreviousAddressRcd != null);
		System.assert(objPreviousAddressRcd.address == null);
		System.assert(objPreviousAddressRcd.city == null);
		System.assert(objPreviousAddressRcd.state == null);
		System.assert(objPreviousAddressRcd.zipCode == null);
		System.assert(objPreviousAddressRcd.zipPlus4 == null);
		System.assert(objPreviousAddressRcd.reportedDate == null);
		System.assert(objPreviousAddressRcd.lastUpdatedDate == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Kba_Z objKba_Z = new AGN_DSRM_Experian_Response.Kba_Z(System.JSON.createParser(json));
		System.assert(objKba_Z != null);
		System.assert(objKba_Z.answers == null);
		System.assert(objKba_Z.championChallengerRandomNumber == null);
		System.assert(objKba_Z.languageCode == null);
		System.assert(objKba_Z.outWalletQuestionsRequest == null);
		System.assert(objKba_Z.riskStrategyNumber == null);
		System.assert(objKba_Z.sessionId == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.FullNameVerifiesToAddress objFullNameVerifiesToAddress = new AGN_DSRM_Experian_Response.FullNameVerifiesToAddress(System.JSON.createParser(json));
		System.assert(objFullNameVerifiesToAddress != null);
		System.assert(objFullNameVerifiesToAddress.value == null);
		System.assert(objFullNameVerifiesToAddress.code == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.ResidentialAddressRcd objResidentialAddressRcd = new AGN_DSRM_Experian_Response.ResidentialAddressRcd(System.JSON.createParser(json));
		System.assert(objResidentialAddressRcd != null);
		System.assert(objResidentialAddressRcd.surname == null);
		System.assert(objResidentialAddressRcd.firstName == null);
		System.assert(objResidentialAddressRcd.aliasName == null);
		System.assert(objResidentialAddressRcd.address == null);
		System.assert(objResidentialAddressRcd.city == null);
		System.assert(objResidentialAddressRcd.state == null);
		System.assert(objResidentialAddressRcd.zipCode == null);
		System.assert(objResidentialAddressRcd.zipPlus4 == null);
		System.assert(objResidentialAddressRcd.lastUpdatedDate == null);
		System.assert(objResidentialAddressRcd.areaCode == null);
		System.assert(objResidentialAddressRcd.phone == null);
		System.assert(objResidentialAddressRcd.otherHouseholdMembers == null);
		System.assert(objResidentialAddressRcd.monthsAtResidence == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Summary_V objSummary_V = new AGN_DSRM_Experian_Response.Summary_V(System.JSON.createParser(json));
		System.assert(objSummary_V != null);
		System.assert(objSummary_V.verificationResult == null);
		System.assert(objSummary_V.formatValidation == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Response objResponse = new AGN_DSRM_Experian_Response.Response(System.JSON.createParser(json));
		System.assert(objResponse != null);
		System.assert(objResponse.products == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.ClientResponsePayload objClientResponsePayload = new AGN_DSRM_Experian_Response.ClientResponsePayload(System.JSON.createParser(json));
		System.assert(objClientResponsePayload != null);
		System.assert(objClientResponsePayload.orchestrationDecisions == null);
		System.assert(objClientResponsePayload.decisionElements == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Summary_U objSummary_U = new AGN_DSRM_Experian_Response.Summary_U(System.JSON.createParser(json));
		System.assert(objSummary_U != null);
		System.assert(objSummary_U.verificationResult == null);
		System.assert(objSummary_U.counts == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		// AGN_DSRM_Experian_Response.IdentityDocuments objIdentityDocuments = new AGN_DSRM_Experian_Response.IdentityDocuments(System.JSON.createParser(json)); //SB - Validation Errot
		// System.assert(objIdentityDocuments != null); //SB - Validation Errot
		// System.assert(objIdentityDocuments.documentNumber == null); //SB - Validation Errot
		// System.assert(objIdentityDocuments.documentType == null); //SB - Validation Errot
		// System.assert(objIdentityDocuments.hashedDocumentNumber == null); //SB - Validation Errot

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Summary_X objSummary_X = new AGN_DSRM_Experian_Response.Summary_X(System.JSON.createParser(json));
		System.assert(objSummary_X != null);
		System.assert(objSummary_X.verificationResult == null);
		System.assert(objSummary_X.deceasedResult == null);
		System.assert(objSummary_X.formatResult == null);
		System.assert(objSummary_X.issueResult == null);
		System.assert(objSummary_X.issueState == null);
		System.assert(objSummary_X.issueStartRange == null);
		System.assert(objSummary_X.issueEndRange == null);
		System.assert(objSummary_X.counts == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Summary_W objSummary_W = new AGN_DSRM_Experian_Response.Summary_W(System.JSON.createParser(json));
		System.assert(objSummary_W != null);
		System.assert(objSummary_W.matchResult == null);
		System.assert(objSummary_W.monthOfBirth == null);
		System.assert(objSummary_W.dayOfBirth == null);
		System.assert(objSummary_W.yearOfBirth == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Summary_R objSummary_R = new AGN_DSRM_Experian_Response.Summary_R(System.JSON.createParser(json));
		System.assert(objSummary_R != null);
		System.assert(objSummary_R.counts == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Contacts objContacts = new AGN_DSRM_Experian_Response.Contacts(System.JSON.createParser(json));
		System.assert(objContacts != null);
		System.assert(objContacts.addresses == null);
		//System.assert(objContacts.emails == null); //SB - Validation error
		System.assert(objContacts.id == null);
		//System.assert(objContacts.identityDocuments == null); //SB - Validation error
		System.assert(objContacts.person == null);
		System.assert(objContacts.telephones == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Summary_T objSummary_T = new AGN_DSRM_Experian_Response.Summary_T(System.JSON.createParser(json));
		System.assert(objSummary_T != null);
		System.assert(objSummary_T.verificationResult == null);
		System.assert(objSummary_T.counts == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Telephones objTelephones = new AGN_DSRM_Experian_Response.Telephones(System.JSON.createParser(json));
		System.assert(objTelephones != null);
		System.assert(objTelephones.id == null);
		//System.assert(objTelephones.number_Z == null); //SB - Validation error

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Summary_S objSummary_S = new AGN_DSRM_Experian_Response.Summary_S(System.JSON.createParser(json));
		System.assert(objSummary_S != null);
		System.assert(objSummary_S.counts == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Summary objSummary = new AGN_DSRM_Experian_Response.Summary(System.JSON.createParser(json));
		System.assert(objSummary != null);
		System.assert(objSummary.transactionID == null);
		System.assert(objSummary.initialDecision == null);
		System.assert(objSummary.finalDecision == null);
		System.assert(objSummary.crossReferenceIndicatorsGrid == null);
		System.assert(objSummary.dateOfBirthMatch == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.PreviousAddresses objPreviousAddresses = new AGN_DSRM_Experian_Response.PreviousAddresses(System.JSON.createParser(json));
		System.assert(objPreviousAddresses != null);
		System.assert(objPreviousAddresses.previousAddress == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.Ofac objOfac = new AGN_DSRM_Experian_Response.Ofac(System.JSON.createParser(json));
		System.assert(objOfac != null);
		System.assert(objOfac.summary == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		AGN_DSRM_Experian_Response.ValidateOTP objValidateOTP = new AGN_DSRM_Experian_Response.ValidateOTP(System.JSON.createParser(json));
		System.assert(objValidateOTP != null);
		System.assert(objValidateOTP.otp == null);
		System.assert(objValidateOTP.otpMatchResult == null);
	}
}